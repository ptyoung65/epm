# Docker Compose for AIRIS EPM Microservices Architecture
version: '3.8'

services:
  # Service Registry (Consul-compatible)
  service-registry:
    build:
      context: ./services
      dockerfile: service-registry/Dockerfile
    container_name: airis-service-registry
    ports:
      - "8500:8500"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
    networks:
      - airis-microservices
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./services
      dockerfile: api-gateway/Dockerfile
    container_name: airis-api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - SERVICE_REGISTRY_URL=http://service-registry:8500
      - REDIS_HOST=redis
      - JWT_SECRET=${JWT_SECRET:-airis_jwt_secret}
      - ALLOWED_ORIGINS=http://localhost:3002,http://localhost:8080
    volumes:
      - ./logs:/app/logs
    networks:
      - airis-microservices
    restart: unless-stopped
    depends_on:
      - service-registry
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Metrics Service
  metrics-service:
    build:
      context: ./services
      dockerfile: metrics-service/Dockerfile
    container_name: airis-metrics-service
    ports:
      - "3021:3021"
    environment:
      - NODE_ENV=production
      - PORT=3021
      - SERVICE_REGISTRY_URL=http://service-registry:8500
      - ENABLE_SERVICE_REGISTRY=true
      - REDIS_HOST=redis
      - CLICKHOUSE_URL=http://clickhouse
      - CLICKHOUSE_PORT=8123
      - KAFKA_BROKERS=kafka1:29092,kafka2:29092,kafka3:29092
      - BUFFER_SIZE=1000
      - FLUSH_INTERVAL=5000
    volumes:
      - ./logs:/app/logs
    networks:
      - airis-microservices
      - airis-etl-network
    restart: unless-stopped
    depends_on:
      - service-registry
      - redis
      - clickhouse
      - kafka1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3021/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Logs Service
  logs-service:
    build:
      context: ./services
      dockerfile: logs-service/Dockerfile
    container_name: airis-logs-service
    ports:
      - "3022:3022"
    environment:
      - NODE_ENV=production
      - PORT=3022
      - SERVICE_REGISTRY_URL=http://service-registry:8500
      - ENABLE_SERVICE_REGISTRY=true
      - REDIS_HOST=redis
      - CLICKHOUSE_URL=http://clickhouse
      - CLICKHOUSE_PORT=8123
      - KAFKA_BROKERS=kafka1:29092,kafka2:29092,kafka3:29092
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-}
      - BUFFER_SIZE=2000
      - FLUSH_INTERVAL=3000
    volumes:
      - ./logs:/app/logs
    networks:
      - airis-microservices
      - airis-etl-network
    restart: unless-stopped
    depends_on:
      - service-registry
      - redis
      - clickhouse
      - kafka1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3022/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Traces Service
  traces-service:
    build:
      context: ./services
      dockerfile: traces-service/Dockerfile
    container_name: airis-traces-service
    ports:
      - "3023:3023"
    environment:
      - NODE_ENV=production
      - PORT=3023
      - SERVICE_REGISTRY_URL=http://service-registry:8500
      - ENABLE_SERVICE_REGISTRY=true
      - REDIS_HOST=redis
      - CLICKHOUSE_URL=http://clickhouse
      - CLICKHOUSE_PORT=8123
      - KAFKA_BROKERS=kafka1:29092,kafka2:29092,kafka3:29092
      - BUFFER_SIZE=1000
      - FLUSH_INTERVAL=5000
    volumes:
      - ./logs:/app/logs
    networks:
      - airis-microservices
      - airis-etl-network
    restart: unless-stopped
    depends_on:
      - service-registry
      - redis
      - clickhouse
      - kafka1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3023/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Alerts Service
  alerts-service:
    build:
      context: ./services
      dockerfile: alerts-service/Dockerfile
    container_name: airis-alerts-service
    ports:
      - "3024:3024"
    environment:
      - NODE_ENV=production
      - PORT=3024
      - SERVICE_REGISTRY_URL=http://service-registry:8500
      - ENABLE_SERVICE_REGISTRY=true
      - REDIS_HOST=redis
      - MONGODB_URL=mongodb://mongodb:27017
      - MONGODB_DB=airis_epm
      - KAFKA_BROKERS=kafka1:29092,kafka2:29092,kafka3:29092
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASS=${SMTP_PASS:-}
      - SMTP_FROM=${SMTP_FROM:-}
      - SLACK_TOKEN=${SLACK_TOKEN:-}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID:-}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN:-}
      - TWILIO_FROM=${TWILIO_FROM:-}
      - BUFFER_SIZE=100
    volumes:
      - ./logs:/app/logs
    networks:
      - airis-microservices
      - airis-etl-network
    restart: unless-stopped
    depends_on:
      - service-registry
      - redis
      - mongodb
      - kafka1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3024/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ETL Pipeline Service
  etl-pipeline:
    build:
      context: ./services
      dockerfile: etl-pipeline/Dockerfile
    container_name: airis-etl-pipeline
    ports:
      - "3020:3020"
    environment:
      - NODE_ENV=production
      - PORT=3020
      - SERVICE_REGISTRY_URL=http://service-registry:8500
      - ENABLE_SERVICE_REGISTRY=true
      - KAFKA_BROKERS=kafka1:29092,kafka2:29092,kafka3:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CLICKHOUSE_URL=http://clickhouse
      - CLICKHOUSE_PORT=8123
      - CLICKHOUSE_DB=airis_epm
      - MONGODB_URL=mongodb://mongodb:27017
      - MONGODB_DB=airis_epm
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=airis_epm
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - ETL_BATCH_SIZE=1000
      - ETL_BATCH_INTERVAL=5000
    volumes:
      - ./logs:/app/logs
    networks:
      - airis-microservices
      - airis-etl-network
    restart: unless-stopped
    depends_on:
      - service-registry
      - kafka1
      - redis
      - clickhouse
      - mongodb
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3020/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Infrastructure Services
  redis:
    image: redis:7.2-alpine
    container_name: airis-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - airis-microservices
      - airis-etl-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  mongodb:
    image: mongo:7.0
    container_name: airis-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=airis_epm
    volumes:
      - mongodb_data:/data/db
    networks:
      - airis-microservices
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: airis-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=airis_epm
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - airis-microservices
    restart: unless-stopped

  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: airis-clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      - CLICKHOUSE_DB=airis_epm
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    networks:
      - airis-microservices
      - airis-etl-network
    restart: unless-stopped

  # Kafka cluster (from ETL compose)
  kafka1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: airis-kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka1_data:/var/lib/kafka/data
    networks:
      - airis-etl-network
    restart: unless-stopped
    depends_on:
      - zookeeper

  kafka2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: airis-kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:29092,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka2_data:/var/lib/kafka/data
    networks:
      - airis-etl-network
    restart: unless-stopped
    depends_on:
      - zookeeper

  kafka3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: airis-kafka3
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:29092,EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka3_data:/var/lib/kafka/data
    networks:
      - airis-etl-network
    restart: unless-stopped
    depends_on:
      - zookeeper

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: airis-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - airis-etl-network
    restart: unless-stopped

networks:
  airis-microservices:
    driver: bridge
    name: airis-microservices-network
  airis-etl-network:
    driver: bridge
    name: airis-etl-network

volumes:
  redis_data:
    name: airis-epm-redis-data
  mongodb_data:
    name: airis-epm-mongodb-data
  postgres_data:
    name: airis-epm-postgres-data
  clickhouse_data:
    name: airis-epm-clickhouse-data
  kafka1_data:
    name: airis-epm-kafka1-data
  kafka2_data:
    name: airis-epm-kafka2-data
  kafka3_data:
    name: airis-epm-kafka3-data
  zookeeper_data:
    name: airis-epm-zookeeper-data