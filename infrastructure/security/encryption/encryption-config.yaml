# AIRIS EPM Encryption Configuration
# Data encryption at rest and in transit

# EncryptionConfiguration for Kubernetes API Server
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
- resources:
  - secrets
  - configmaps
  - events
  providers:
  - aescbc:
      keys:
      - name: key1
        secret: c2VjcmV0IGVuY3J5cHRpb24ga2V5IGZvciBhaXJpcy1lcG0=
  - identity: {}

---
# TLS Certificate for AIRIS EPM Services
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: airis-epm-tls-cert
  namespace: airis-epm
spec:
  secretName: airis-epm-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - epm.airis.company.com
  - api.epm.airis.company.com
  - monitoring.epm.airis.company.com

---
# ClusterIssuer for Let's Encrypt
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@airis.company.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx

---
# Self-signed ClusterIssuer for Development
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: selfsigned-issuer
spec:
  selfSigned: {}

---
# CA Issuer for Internal Services
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: ca-issuer
  namespace: airis-epm
spec:
  ca:
    secretName: ca-key-pair

---
# Root CA Certificate
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: ca-cert
  namespace: airis-epm
spec:
  isCA: true
  commonName: AIRIS EPM Root CA
  secretName: ca-key-pair
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: selfsigned-issuer
    kind: ClusterIssuer
    group: cert-manager.io

---
# Internal Service Certificates
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: database-tls-cert
  namespace: airis-epm
spec:
  secretName: database-tls-secret
  issuerRef:
    name: ca-issuer
    kind: Issuer
  dnsNames:
  - postgres.airis-epm.svc.cluster.local
  - clickhouse.airis-epm.svc.cluster.local
  - redis.airis-epm.svc.cluster.local
  - mongodb.airis-epm.svc.cluster.local

---
# Sealed Secret Controller for GitOps
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sealed-secrets-controller
  namespace: kube-system
  labels:
    app: sealed-secrets-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sealed-secrets-controller
  template:
    metadata:
      labels:
        app: sealed-secrets-controller
    spec:
      serviceAccountName: sealed-secrets-controller
      containers:
      - name: sealed-secrets-controller
        image: quay.io/bitnami/sealed-secrets-controller:v0.24.0
        command:
        - controller
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8081
          name: metrics
        env:
        - name: SEALED_SECRETS_UPDATE_STATUS
          value: "true"
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"

---
# Service Account for Sealed Secrets Controller
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sealed-secrets-controller
  namespace: kube-system
  labels:
    app: sealed-secrets-controller

---
# ClusterRole for Sealed Secrets Controller
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sealed-secrets-controller
  labels:
    app: sealed-secrets-controller
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["bitnami.com"]
  resources: ["sealedsecrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# ClusterRoleBinding for Sealed Secrets Controller
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sealed-secrets-controller
  labels:
    app: sealed-secrets-controller
subjects:
- kind: ServiceAccount
  name: sealed-secrets-controller
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: sealed-secrets-controller
  apiGroup: rbac.authorization.k8s.io

---
# Encryption Key Rotation CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: encryption-key-rotation
  namespace: airis-epm
spec:
  schedule: "0 3 1 * *"  # Monthly on 1st day at 3 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: airis-epm-app
          restartPolicy: OnFailure
          containers:
          - name: key-rotator
            image: vault:1.14.0
            command: ["/bin/sh"]
            args:
            - -c
            - |
              # Vault key rotation script
              export VAULT_ADDR="https://vault.airis-epm.svc.cluster.local:8200"
              export VAULT_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              
              # Rotate database passwords
              vault auth -method=kubernetes
              
              # Generate new passwords
              NEW_POSTGRES_PASS=$(openssl rand -base64 32)
              NEW_CLICKHOUSE_PASS=$(openssl rand -base64 32)
              NEW_REDIS_PASS=$(openssl rand -base64 32)
              
              # Update Vault secrets
              vault kv put secret/database \
                postgres_password="$NEW_POSTGRES_PASS" \
                clickhouse_password="$NEW_CLICKHOUSE_PASS" \
                redis_password="$NEW_REDIS_PASS"
              
              # Trigger secret refresh
              kubectl annotate externalsecret database-credentials \
                force-sync=$(date +%s) -n airis-epm
              
              echo "Key rotation completed successfully"
            env:
            - name: VAULT_SKIP_VERIFY
              value: "true"
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"