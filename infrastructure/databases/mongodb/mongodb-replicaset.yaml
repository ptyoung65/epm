# AIRIS EPM MongoDB Replica Set Configuration
# High-availability MongoDB with automatic failover and data replication

# MongoDB ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-config
  namespace: airis-epm
  labels:
    app: mongodb
    component: database
data:
  mongod.conf: |
    # Network interfaces
    net:
      port: 27017
      bindIp: 0.0.0.0
      maxIncomingConnections: 20000
      wireObjectCheck: true
      ipv6: false

    # Process management
    processManagement:
      timeZoneInfo: /usr/share/zoneinfo

    # Security
    security:
      authorization: enabled
      keyFile: /etc/mongodb-keyfile/mongodb-keyfile

    # Storage
    storage:
      dbPath: /data/db
      journal:
        enabled: true
      wiredTiger:
        engineConfig:
          cacheSizeGB: 2
          journalCompressor: snappy
          directoryForIndexes: false
        collectionConfig:
          blockCompressor: snappy
        indexConfig:
          prefixCompression: true

    # Operation Profiling
    operationProfiling:
      slowOpThresholdMs: 100
      mode: slowOp

    # Replication
    replication:
      replSetName: airis-epm-rs
      oplogSizeMB: 1024

    # Sharding (disabled for replica set)
    #sharding:
    #  clusterRole: shardsvr

    # System log
    systemLog:
      destination: file
      logAppend: true
      path: /var/log/mongodb/mongod.log
      logRotate: reopen
      verbosity: 1
      component:
        accessControl:
          verbosity: 1
        command:
          verbosity: 1
        replication:
          verbosity: 1
        storage:
          verbosity: 1

    # Set parameters
    setParameter:
      enableLocalhostAuthBypass: false
      authenticationMechanisms: SCRAM-SHA-1,SCRAM-SHA-256
      maxLogSizeKB: 10000
      logLevel: 1

  init-replica-set.js: |
    // Initialize replica set configuration
    var config = {
      "_id": "airis-epm-rs",
      "version": 1,
      "members": [
        {
          "_id": 0,
          "host": "mongodb-0.mongodb-headless.airis-epm.svc.cluster.local:27017",
          "priority": 3
        },
        {
          "_id": 1,
          "host": "mongodb-1.mongodb-headless.airis-epm.svc.cluster.local:27017",
          "priority": 2
        },
        {
          "_id": 2,
          "host": "mongodb-2.mongodb-headless.airis-epm.svc.cluster.local:27017",
          "priority": 1
        }
      ],
      "settings": {
        "chainingAllowed": true,
        "heartbeatIntervalMillis": 2000,
        "heartbeatTimeoutSecs": 10,
        "electionTimeoutMillis": 10000,
        "catchUpTimeoutMillis": -1,
        "catchUpTakeoverDelayMillis": 30000,
        "getLastErrorModes": {},
        "getLastErrorDefaults": {
          "w": "majority",
          "wtimeout": 0
        },
        "replicaSetId": ObjectId()
      }
    };

    rs.initiate(config);

    // Wait for primary election
    while (!db.isMaster().ismaster) {
      sleep(1000);
    }

    // Create admin user
    db.getSiblingDB('admin').createUser({
      user: 'admin',
      pwd: process.env.MONGODB_ROOT_PASSWORD,
      roles: [
        { role: 'root', db: 'admin' },
        { role: 'clusterAdmin', db: 'admin' },
        { role: 'dbAdminAnyDatabase', db: 'admin' },
        { role: 'userAdminAnyDatabase', db: 'admin' },
        { role: 'readWriteAnyDatabase', db: 'admin' }
      ]
    });

    // Create application database and user
    db.getSiblingDB('airis_epm').createUser({
      user: 'airis_epm_user',
      pwd: process.env.MONGODB_AIRIS_PASSWORD,
      roles: [
        { role: 'readWrite', db: 'airis_epm' },
        { role: 'dbAdmin', db: 'airis_epm' }
      ]
    });

    // Create indexes for AIRIS EPM collections
    var airisDb = db.getSiblingDB('airis_epm');

    // Performance metrics collection
    airisDb.performance_metrics.createIndex({ "timestamp": 1, "service": 1 });
    airisDb.performance_metrics.createIndex({ "timestamp": -1 });
    airisDb.performance_metrics.createIndex({ "service": 1, "metric_type": 1 });

    // Business metrics collection
    airisDb.business_metrics.createIndex({ "timestamp": 1, "department": 1 });
    airisDb.business_metrics.createIndex({ "metric_name": 1, "timestamp": -1 });

    // User sessions collection
    airisDb.user_sessions.createIndex({ "user_id": 1 });
    airisDb.user_sessions.createIndex({ "session_id": 1 }, { unique: true });
    airisDb.user_sessions.createIndex({ "expires_at": 1 }, { expireAfterSeconds: 0 });

    // Configuration collection
    airisDb.configurations.createIndex({ "service": 1, "environment": 1 });
    airisDb.configurations.createIndex({ "updated_at": -1 });

    print("MongoDB replica set and AIRIS EPM database initialized successfully!");

---
# MongoDB StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: airis-epm
  labels:
    app: mongodb
    component: database
spec:
  serviceName: mongodb-headless
  replicas: 3
  selector:
    matchLabels:
      app: mongodb
      component: database
  template:
    metadata:
      labels:
        app: mongodb
        component: database
    spec:
      serviceAccountName: airis-epm-db-operator
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
      - name: volume-permissions
        image: busybox:1.35
        command: ['sh', '-c', 'chown -R 999:999 /data/db /var/log/mongodb']
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-logs
          mountPath: /var/log/mongodb
        securityContext:
          runAsUser: 0
      - name: keyfile-setup
        image: busybox:1.35
        command:
        - /bin/sh
        - -c
        - |
          # Create keyfile with proper permissions
          echo "$(cat /tmp/keyfile/mongodb-keyfile)" > /etc/mongodb-keyfile/mongodb-keyfile
          chmod 400 /etc/mongodb-keyfile/mongodb-keyfile
          chown 999:999 /etc/mongodb-keyfile/mongodb-keyfile
        volumeMounts:
        - name: mongodb-keyfile-secret
          mountPath: /tmp/keyfile
        - name: mongodb-keyfile
          mountPath: /etc/mongodb-keyfile
        securityContext:
          runAsUser: 0
      containers:
      - name: mongodb
        image: mongo:7.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 27017
          name: mongodb
        env:
        - name: MONGODB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-credentials
              key: root-password
        - name: MONGODB_AIRIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-credentials
              key: airis-password
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-logs
          mountPath: /var/log/mongodb
        - name: mongodb-config
          mountPath: /etc/mongod.conf
          subPath: mongod.conf
        - name: mongodb-keyfile
          mountPath: /etc/mongodb-keyfile
        - name: mongodb-init-scripts
          mountPath: /docker-entrypoint-initdb.d
        command:
        - /bin/bash
        - -c
        - |
          # Wait for keyfile to be ready
          while [ ! -f /etc/mongodb-keyfile/mongodb-keyfile ]; do
            echo "Waiting for keyfile..."
            sleep 1
          done
          
          # Start MongoDB with config file
          exec mongod --config /etc/mongod.conf
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
        resources:
          requests:
            memory: "4Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "2000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: mongodb-config
        configMap:
          name: mongodb-config
      - name: mongodb-init-scripts
        configMap:
          name: mongodb-config
          items:
          - key: init-replica-set.js
            path: init-replica-set.js
      - name: mongodb-keyfile-secret
        secret:
          secretName: mongodb-keyfile
          defaultMode: 0400
      - name: mongodb-keyfile
        emptyDir:
          medium: Memory
      - name: mongodb-logs
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi

---
# MongoDB Headless Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-headless
  namespace: airis-epm
  labels:
    app: mongodb
    component: database
spec:
  clusterIP: None
  selector:
    app: mongodb
    component: database
  ports:
  - name: mongodb
    port: 27017
    targetPort: 27017

---
# MongoDB Primary Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-primary
  namespace: airis-epm
  labels:
    app: mongodb
    component: database
    service-type: primary
spec:
  type: ClusterIP
  selector:
    app: mongodb
    component: database
  ports:
  - name: mongodb
    port: 27017
    targetPort: 27017

---
# MongoDB Secondary Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-secondary
  namespace: airis-epm
  labels:
    app: mongodb
    component: database
    service-type: secondary
spec:
  type: ClusterIP
  selector:
    app: mongodb
    component: database
  ports:
  - name: mongodb
    port: 27017
    targetPort: 27017

---
# MongoDB Replica Set Initialization Job
apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-replica-init
  namespace: airis-epm
  labels:
    app: mongodb-replica-init
    component: setup
spec:
  template:
    spec:
      serviceAccountName: airis-epm-db-operator
      restartPolicy: OnFailure
      containers:
      - name: mongodb-replica-init
        image: mongo:7.0
        env:
        - name: MONGODB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-credentials
              key: root-password
        - name: MONGODB_AIRIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-credentials
              key: airis-password
        volumeMounts:
        - name: mongodb-init-scripts
          mountPath: /scripts
        command:
        - /bin/bash
        - -c
        - |
          # Wait for all MongoDB instances to be ready
          for i in 0 1 2; do
            until mongo --host mongodb-$i.mongodb-headless.airis-epm.svc.cluster.local:27017 --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' &>/dev/null; do
              echo "Waiting for mongodb-$i..."
              sleep 5
            done
          done
          
          # Initialize replica set from primary node
          mongo --host mongodb-0.mongodb-headless.airis-epm.svc.cluster.local:27017 /scripts/init-replica-set.js
          
          echo "MongoDB replica set initialization completed!"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: mongodb-init-scripts
        configMap:
          name: mongodb-config

---
# MongoDB Express for Administration (Optional)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
  namespace: airis-epm
  labels:
    app: mongo-express
    component: admin-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
      component: admin-ui
  template:
    metadata:
      labels:
        app: mongo-express
        component: admin-ui
    spec:
      serviceAccountName: airis-epm-monitoring
      containers:
      - name: mongo-express
        image: mongo-express:1.0.0-alpha
        ports:
        - containerPort: 8081
          name: http
        env:
        - name: ME_CONFIG_MONGODB_SERVER
          value: "mongodb-primary.airis-epm.svc.cluster.local"
        - name: ME_CONFIG_MONGODB_PORT
          value: "27017"
        - name: ME_CONFIG_MONGODB_ADMINUSERNAME
          value: "admin"
        - name: ME_CONFIG_MONGODB_ADMINPASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-credentials
              key: root-password
        - name: ME_CONFIG_BASICAUTH_USERNAME
          value: "airis-admin"
        - name: ME_CONFIG_BASICAUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-credentials
              key: admin-ui-password
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL

---
# Mongo Express Service
apiVersion: v1
kind: Service
metadata:
  name: mongo-express
  namespace: airis-epm
  labels:
    app: mongo-express
    component: admin-ui
spec:
  type: ClusterIP
  selector:
    app: mongo-express
    component: admin-ui
  ports:
  - name: http
    port: 8081
    targetPort: 8081