# AIRIS EPM AlertManager Configuration
# Comprehensive alerting and notification system

# AlertManager Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: airis-epm
  labels:
    app: alertmanager
    component: monitoring
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.airis.company.com:587'
      smtp_from: 'alerts@airis.company.com'
      smtp_auth_username: 'alerts@airis.company.com'
      smtp_auth_password: '${SMTP_PASSWORD}'
      smtp_require_tls: true
      
      slack_api_url: '${SLACK_WEBHOOK_URL}'
      
      resolve_timeout: 5m
      http_config:
        tls_config:
          insecure_skip_verify: false

    templates:
      - '/etc/alertmanager/templates/*.tmpl'

    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 12h
      receiver: 'default'
      routes:
      
      # Critical alerts - immediate escalation
      - match:
          severity: critical
        receiver: 'critical-alerts'
        group_wait: 0s
        repeat_interval: 5m
        continue: false
        
      # Service-specific routes
      - match:
          service: airis-epm
        receiver: 'airis-epm-team'
        group_wait: 30s
        repeat_interval: 1h
        routes:
        - match:
            alertname: AIRISEPMServiceDown
          receiver: 'critical-alerts'
          group_wait: 0s
          repeat_interval: 2m
          
      - match:
          service: clickhouse
        receiver: 'database-team'
        group_wait: 1m
        repeat_interval: 30m
        
      - match:
          service: postgresql
        receiver: 'database-team' 
        group_wait: 1m
        repeat_interval: 30m
        
      - match:
          service: redis
        receiver: 'database-team'
        group_wait: 1m
        repeat_interval: 30m
        
      - match:
          service: mongodb
        receiver: 'database-team'
        group_wait: 1m
        repeat_interval: 30m

      # Warning alerts
      - match:
          severity: warning
        receiver: 'warning-alerts'
        group_wait: 2m
        repeat_interval: 2h
        
      # Infrastructure alerts
      - match_re:
          alertname: High.*Usage|Low.*Space
        receiver: 'infrastructure-team'
        group_wait: 5m
        repeat_interval: 1h

    inhibit_rules:
    # Inhibit warning alerts if critical alert is firing
    - source_match:
        severity: 'critical'
      target_match:
        severity: 'warning'
      equal: ['alertname', 'service', 'instance']
      
    # Inhibit duplicate service down alerts
    - source_match:
        alertname: 'AIRISEPMServiceDown'
      target_match_re:
        alertname: '.*Down'
      equal: ['service']

    receivers:
    - name: 'default'
      slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#airis-epm-alerts'
        username: 'AlertManager'
        icon_emoji: ':warning:'
        title: 'AIRIS EPM Alert'
        text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
        send_resolved: true

    - name: 'critical-alerts'
      email_configs:
      - to: 'critical-alerts@airis.company.com'
        subject: 'ðŸš¨ CRITICAL: {{ .GroupLabels.alertname }} - {{ .GroupLabels.service }}'
        headers:
          Priority: 'high'
          X-Priority: '1'
        body: |
          ðŸš¨ **CRITICAL ALERT** ðŸš¨
          
          **Cluster**: {{ .GroupLabels.cluster }}
          **Service**: {{ .GroupLabels.service }}
          **Alert**: {{ .GroupLabels.alertname }}
          
          {{ range .Alerts }}
          **Instance**: {{ .Labels.instance }}
          **Summary**: {{ .Annotations.summary }}
          **Description**: {{ .Annotations.description }}
          **Started**: {{ .StartsAt.Format "2006-01-02 15:04:05 MST" }}
          {{ if .Annotations.runbook_url }}
          **Runbook**: {{ .Annotations.runbook_url }}
          {{ end }}
          ---
          {{ end }}
          
          Please investigate immediately.
          
          Dashboard: https://grafana.airis.company.com
          Prometheus: https://prometheus.airis.company.com
        
      slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#airis-critical-alerts'
        username: 'AlertManager'
        icon_emoji: ':rotating_light:'
        title: 'ðŸš¨ CRITICAL ALERT: {{ .GroupLabels.alertname }}'
        text: |
          **Service**: {{ .GroupLabels.service }}
          **Cluster**: {{ .GroupLabels.cluster }}
          
          {{ range .Alerts }}
          â€¢ **{{ .Labels.instance }}**: {{ .Annotations.summary }}
            {{ if .Annotations.description }}> {{ .Annotations.description }}{{ end }}
            {{ if .Annotations.runbook_url }}> Runbook: {{ .Annotations.runbook_url }}{{ end }}
          {{ end }}
        send_resolved: true
        
      pagerduty_configs:
      - routing_key: '${PAGERDUTY_ROUTING_KEY}'
        description: '{{ .GroupLabels.alertname }} - {{ .GroupLabels.service }}'
        severity: 'critical'
        details:
          cluster: '{{ .GroupLabels.cluster }}'
          service: '{{ .GroupLabels.service }}'
          alert_count: '{{ len .Alerts }}'

    - name: 'airis-epm-team'
      email_configs:
      - to: 'airis-epm-team@airis.company.com'
        subject: 'AIRIS EPM Alert: {{ .GroupLabels.alertname }}'
        body: |
          **AIRIS EPM Application Alert**
          
          {{ range .Alerts }}
          **Alert**: {{ .Annotations.summary }}
          **Description**: {{ .Annotations.description }}
          **Instance**: {{ .Labels.instance }}
          **Severity**: {{ .Labels.severity }}
          **Started**: {{ .StartsAt.Format "2006-01-02 15:04:05 MST" }}
          {{ if .GeneratorURL }}**Source**: {{ .GeneratorURL }}{{ end }}
          ---
          {{ end }}
        
      slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#airis-epm-team'
        username: 'AlertManager'
        icon_emoji: ':warning:'
        title: 'AIRIS EPM Alert: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          **{{ .Labels.severity | toUpper }}**: {{ .Annotations.summary }}
          {{ if .Annotations.description }}> {{ .Annotations.description }}{{ end }}
          {{ end }}
        send_resolved: true

    - name: 'database-team'
      email_configs:
      - to: 'database-team@airis.company.com'
        subject: 'Database Alert: {{ .GroupLabels.service }} - {{ .GroupLabels.alertname }}'
        body: |
          **Database Alert - {{ .GroupLabels.service | title }}**
          
          {{ range .Alerts }}
          **Alert**: {{ .Annotations.summary }}
          **Database**: {{ .Labels.service }}
          **Instance**: {{ .Labels.instance }}
          **Severity**: {{ .Labels.severity }}
          **Description**: {{ .Annotations.description }}
          **Started**: {{ .StartsAt.Format "2006-01-02 15:04:05 MST" }}
          ---
          {{ end }}
        
      slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#database-alerts'
        username: 'AlertManager'
        icon_emoji: ':floppy_disk:'
        title: '{{ .GroupLabels.service | title }} Alert: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          **{{ .Labels.severity | toUpper }}**: {{ .Annotations.summary }}
          **Instance**: {{ .Labels.instance }}
          {{ if .Annotations.description }}> {{ .Annotations.description }}{{ end }}
          {{ end }}
        send_resolved: true

    - name: 'warning-alerts'
      email_configs:
      - to: 'warnings@airis.company.com'
        subject: 'Warning: {{ .GroupLabels.alertname }} - {{ .GroupLabels.service }}'
        body: |
          **Warning Alert**
          
          {{ range .Alerts }}
          **Service**: {{ .Labels.service }}
          **Alert**: {{ .Annotations.summary }}
          **Instance**: {{ .Labels.instance }}
          **Description**: {{ .Annotations.description }}
          **Started**: {{ .StartsAt.Format "2006-01-02 15:04:05 MST" }}
          {{ if .GeneratorURL }}**Source**: {{ .GeneratorURL }}{{ end }}
          ---
          {{ end }}
        
      slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#airis-epm-warnings'
        username: 'AlertManager'
        icon_emoji: ':warning:'
        title: 'Warning: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          **Service**: {{ .Labels.service }}
          **{{ .Labels.severity | toUpper }}**: {{ .Annotations.summary }}
          {{ if .Annotations.description }}> {{ .Annotations.description }}{{ end }}
          {{ end }}
        send_resolved: true

    - name: 'infrastructure-team'
      email_configs:
      - to: 'infrastructure@airis.company.com'
        subject: 'Infrastructure Alert: {{ .GroupLabels.alertname }}'
        body: |
          **Infrastructure Alert**
          
          {{ range .Alerts }}
          **Node/Resource**: {{ .Labels.instance }}
          **Alert**: {{ .Annotations.summary }}
          **Description**: {{ .Annotations.description }}
          **Severity**: {{ .Labels.severity }}
          **Started**: {{ .StartsAt.Format "2006-01-02 15:04:05 MST" }}
          ---
          {{ end }}
        
      slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#infrastructure-alerts'
        username: 'AlertManager'
        icon_emoji: ':construction:'
        title: 'Infrastructure Alert: {{ .GroupLabels.alertname }}'
        text: |
          {{ range .Alerts }}
          **{{ .Labels.severity | toUpper }}**: {{ .Annotations.summary }}
          **Node**: {{ .Labels.instance }}
          {{ if .Annotations.description }}> {{ .Annotations.description }}{{ end }}
          {{ end }}
        send_resolved: true

  alert-templates.tmpl: |
    {{ define "airis.title" }}
    [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join " " }}
    {{ end }}

    {{ define "airis.message" }}
    {{ if gt (len .Alerts.Firing) 0 }}
    **Firing:**
    {{ range .Alerts.Firing }}
    â€¢ **{{ .Annotations.summary }}** ({{ .Labels.severity }})
      {{ if .Annotations.description }}{{ .Annotations.description }}{{ end }}
      _Started: {{ .StartsAt.Format "2006-01-02 15:04:05 MST" }}_
    {{ end }}
    {{ end }}

    {{ if gt (len .Alerts.Resolved) 0 }}
    **Resolved:**
    {{ range .Alerts.Resolved }}
    â€¢ **{{ .Annotations.summary }}**
      _Resolved: {{ .EndsAt.Format "2006-01-02 15:04:05 MST" }}_
    {{ end }}
    {{ end }}
    {{ end }}

    {{ define "airis.color" }}
    {{ if eq .Status "firing" }}
      {{ if eq .GroupLabels.severity "critical" }}danger{{ else if eq .GroupLabels.severity "warning" }}warning{{ else }}good{{ end }}
    {{ else }}good{{ end }}
    {{ end }}

---
# AlertManager Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: airis-epm
  labels:
    app: alertmanager
    component: monitoring
spec:
  replicas: 2
  selector:
    matchLabels:
      app: alertmanager
      component: monitoring
  template:
    metadata:
      labels:
        app: alertmanager
        component: monitoring
    spec:
      serviceAccountName: airis-epm-monitoring
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.26.0
        args:
          - '--config.file=/etc/alertmanager/alertmanager.yml'
          - '--storage.path=/alertmanager'
          - '--data.retention=120h'
          - '--web.listen-address=:9093'
          - '--web.external-url=http://alertmanager.airis.company.com'
          - '--cluster.listen-address=0.0.0.0:9094'
          - '--cluster.peer=alertmanager-0.alertmanager.airis-epm.svc.cluster.local:9094'
          - '--cluster.peer=alertmanager-1.alertmanager.airis-epm.svc.cluster.local:9094'
          - '--log.level=info'
        ports:
        - containerPort: 9093
          name: alertmanager
        - containerPort: 9094
          name: cluster
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: alertmanager-secrets
              key: smtp-password
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: alertmanager-secrets
              key: slack-webhook-url
        - name: PAGERDUTY_ROUTING_KEY
          valueFrom:
            secretKeyRef:
              name: alertmanager-secrets
              key: pagerduty-routing-key
        volumeMounts:
        - name: config
          mountPath: /etc/alertmanager
        - name: storage
          mountPath: /alertmanager
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9093
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: alertmanager-config
      - name: storage
        persistentVolumeClaim:
          claimName: alertmanager-storage

---
# AlertManager Service
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: airis-epm
  labels:
    app: alertmanager
    component: monitoring
spec:
  type: ClusterIP
  selector:
    app: alertmanager
    component: monitoring
  ports:
  - name: alertmanager
    port: 9093
    targetPort: 9093
  - name: cluster
    port: 9094
    targetPort: 9094

---
# AlertManager Storage PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alertmanager-storage
  namespace: airis-epm
  labels:
    app: alertmanager
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd

---
# AlertManager Secrets
apiVersion: v1
kind: Secret
metadata:
  name: alertmanager-secrets
  namespace: airis-epm
  labels:
    app: alertmanager
type: Opaque
stringData:
  smtp-password: "airis-epm-smtp-2025"
  slack-webhook-url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
  pagerduty-routing-key: "YOUR_PAGERDUTY_ROUTING_KEY"

---
# Node Exporter DaemonSet for host metrics
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: airis-epm
  labels:
    app: node-exporter
    component: monitoring
spec:
  selector:
    matchLabels:
      app: node-exporter
      component: monitoring
  template:
    metadata:
      labels:
        app: node-exporter
        component: monitoring
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9100"
    spec:
      hostNetwork: true
      hostPID: true
      serviceAccountName: airis-epm-monitoring
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      containers:
      - name: node-exporter
        image: prom/node-exporter:v1.6.1
        args:
          - '--path.procfs=/host/proc'
          - '--path.rootfs=/rootfs'
          - '--path.sysfs=/host/sys'
          - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
          - '--collector.systemd'
          - '--collector.processes'
        ports:
        - containerPort: 9100
          name: metrics
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        - name: rootfs
          mountPath: /rootfs
          mountPropagation: HostToContainer
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      - name: rootfs
        hostPath:
          path: /
      tolerations:
      - operator: Exists

---
# Node Exporter Service
apiVersion: v1
kind: Service
metadata:
  name: node-exporter
  namespace: airis-epm
  labels:
    app: node-exporter
    component: monitoring
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9100"
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: node-exporter
    component: monitoring
  ports:
  - name: metrics
    port: 9100
    targetPort: 9100