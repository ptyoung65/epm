# AIRIS EPM Staging Environment Configuration
# Production-like environment for testing and validation

# Staging Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: airis-epm-staging
  labels:
    environment: staging
    tier: staging
    monitoring: enabled

---
# Staging ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: airis-epm-config
  namespace: airis-epm-staging
  labels:
    environment: staging
    config-type: application
data:
  # Application Configuration
  NODE_ENV: "staging"
  LOG_LEVEL: "info"
  DEBUG: "false"
  ENVIRONMENT: "staging"
  
  # Database URLs (Staging)
  CLICKHOUSE_URL: "http://clickhouse-staging.airis-epm-staging.svc.cluster.local:8123"
  CLICKHOUSE_DATABASE: "airis_epm_staging"
  
  POSTGRESQL_URL: "postgresql://airis_epm_staging:staging-password@postgresql-staging.airis-epm-staging.svc.cluster.local:5432/airis_epm_staging"
  
  REDIS_URL: "redis://redis-staging.airis-epm-staging.svc.cluster.local:6379"
  REDIS_DATABASE: "1"
  
  MONGODB_URL: "mongodb://airis_epm_staging:staging-password@mongodb-staging.airis-epm-staging.svc.cluster.local:27017/airis_epm_staging"
  
  # API Configuration
  API_BASE_URL: "https://api-staging.airis.company.com"
  API_TIMEOUT: "30000"
  API_RATE_LIMIT: "500"
  
  # Authentication (Staging)
  JWT_EXPIRES_IN: "8h"
  AUTH_PROVIDER: "oauth2"
  
  # Monitoring & Observability
  METRICS_ENABLED: "true"
  TRACING_ENABLED: "true"
  JAEGER_ENDPOINT: "http://jaeger-staging.airis-epm-staging.svc.cluster.local:14268"
  
  # Feature Flags
  ENABLE_DEBUG_ROUTES: "false"
  ENABLE_MOCK_DATA: "false"
  ENABLE_HOT_RELOAD: "false"
  DISABLE_AUTH: "false"
  ENABLE_CORS: "true"
  
  # Performance Settings (Production-like)
  MAX_CONCURRENT_REQUESTS: "500"
  CACHE_TTL: "300"
  BATCH_SIZE: "500"
  
  # Production Build Settings
  WEBPACK_DEV_SERVER: "false"
  SOURCE_MAPS: "false"
  MINIFY: "true"
  
  # SSL/TLS Settings
  FORCE_HTTPS: "true"
  SSL_CERT_PATH: "/etc/ssl/certs/tls.crt"
  SSL_KEY_PATH: "/etc/ssl/private/tls.key"

---
# Staging Secrets
apiVersion: v1
kind: Secret
metadata:
  name: airis-epm-secrets
  namespace: airis-epm-staging
  labels:
    environment: staging
type: Opaque
stringData:
  # Database Credentials
  clickhouse-user: "airis_epm_staging"
  clickhouse-password: "staging-ch-secure-password-2025"
  
  postgresql-user: "airis_epm_staging"
  postgresql-password: "staging-pg-secure-password-2025"
  
  redis-password: "staging-redis-secure-password-2025"
  
  mongodb-user: "airis_epm_staging"
  mongodb-password: "staging-mongo-secure-password-2025"
  
  # JWT Secret
  jwt-secret: "staging-jwt-ultra-secure-secret-key-2025"
  
  # API Keys (Staging)
  openai-api-key: "sk-staging-openai-key-here"
  anthropic-api-key: "sk-staging-anthropic-key-here"
  
  # External Services
  smtp-username: "staging@airis.company.com"
  smtp-password: "staging-smtp-secure-password"
  
  # OAuth2 Credentials
  oauth2-client-id: "airis-epm-staging-client"
  oauth2-client-secret: "staging-oauth2-client-secret-2025"
  
  # SSL Certificates (Staging CA)
  tls-cert: |
    -----BEGIN CERTIFICATE-----
    ... STAGING CERTIFICATE ...
    -----END CERTIFICATE-----
  tls-key: |
    -----BEGIN PRIVATE KEY-----
    ... STAGING PRIVATE KEY ...
    -----END PRIVATE KEY-----

---
# Staging Resource Quotas
apiVersion: v1
kind: ResourceQuota
metadata:
  name: staging-resource-quota
  namespace: airis-epm-staging
spec:
  hard:
    # Compute Resources (Production-like)
    requests.cpu: "16"
    requests.memory: 32Gi
    limits.cpu: "32"
    limits.memory: 64Gi
    
    # Storage
    requests.storage: 500Gi
    persistentvolumeclaims: "20"
    
    # Objects
    pods: "100"
    services: "30"
    configmaps: "30"
    secrets: "30"
    
    # Load Balancers
    services.loadbalancers: "5"

---
# Staging Network Policy (More Restrictive)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: staging-network-policy
  namespace: airis-epm-staging
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow from ingress only
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  # Allow from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  # Allow internal communication
  - from:
    - namespaceSelector:
        matchLabels:
          name: airis-epm-staging
  egress:
  # Allow DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow HTTPS only for external
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow database communication
  - to:
    - namespaceSelector:
        matchLabels:
          name: airis-epm-staging
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 27017
    - protocol: TCP
      port: 8123

---
# Staging Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: airis-epm-staging-pdb
  namespace: airis-epm-staging
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: airis-epm
      environment: staging

---
# Staging HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: staging-hpa
  namespace: airis-epm-staging
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: airis-epm-app-staging
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30

---
# Staging Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airis-epm-app-staging
  namespace: airis-epm-staging
  labels:
    app: airis-epm
    environment: staging
    tier: application
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  selector:
    matchLabels:
      app: airis-epm
      environment: staging
  template:
    metadata:
      labels:
        app: airis-epm
        environment: staging
        monitoring: enabled
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: airis-epm-staging
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: airis-epm
        image: localhost:5000/airis-epm:staging-latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 8080
          name: metrics
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: airis-epm-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: airis-epm-config
              key: LOG_LEVEL
        envFrom:
        - configMapRef:
            name: airis-epm-config
        - secretRef:
            name: airis-epm-secrets
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 45
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: temp-storage
          mountPath: /tmp
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: ssl-private
          mountPath: /etc/ssl/private
          readOnly: true
      volumes:
      - name: app-logs
        emptyDir: {}
      - name: temp-storage
        emptyDir:
          sizeLimit: 2Gi
      - name: ssl-certs
        secret:
          secretName: airis-epm-secrets
          items:
          - key: tls-cert
            path: tls.crt
      - name: ssl-private
        secret:
          secretName: airis-epm-secrets
          items:
          - key: tls-key
            path: tls.key
          defaultMode: 0400
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - airis-epm
              topologyKey: kubernetes.io/hostname

---
# Staging Service
apiVersion: v1
kind: Service
metadata:
  name: airis-epm-service-staging
  namespace: airis-epm-staging
  labels:
    app: airis-epm
    environment: staging
    monitoring: enabled
spec:
  type: ClusterIP
  selector:
    app: airis-epm
    environment: staging
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  - name: metrics
    port: 8080
    targetPort: 8080
    protocol: TCP

---
# Staging Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: airis-epm-ingress-staging
  namespace: airis-epm-staging
  labels:
    environment: staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/rate-limit: "200"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
spec:
  rules:
  - host: staging.airis.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: airis-epm-service-staging
            port:
              number: 80
  tls:
  - hosts:
    - staging.airis.company.com
    secretName: staging-tls-secret

---
# ServiceAccount for Staging
apiVersion: v1
kind: ServiceAccount
metadata:
  name: airis-epm-staging
  namespace: airis-epm-staging
  labels:
    environment: staging

---
# Role for Staging ServiceAccount
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: airis-epm-staging-role
  namespace: airis-epm-staging
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
# RoleBinding for Staging
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: airis-epm-staging-binding
  namespace: airis-epm-staging
subjects:
- kind: ServiceAccount
  name: airis-epm-staging
  namespace: airis-epm-staging
roleRef:
  kind: Role
  name: airis-epm-staging-role
  apiGroup: rbac.authorization.k8s.io