# AIRIS EPM Service Mesh (Istio)
# Complete service mesh implementation with traffic management, security, and observability

# Istio System Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: istio-system
  labels:
    istio-injection: disabled

---
# Istio Control Plane
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: airis-epm-control-plane
  namespace: istio-system
spec:
  # Production configuration
  values:
    global:
      meshID: airis-epm
      network: airis-epm-network
      proxy:
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
      tracer:
        zipkin:
          address: jaeger-collector.airis-epm:14268
    pilot:
      resources:
        requests:
          cpu: 200m
          memory: 256Mi
        limits:
          cpu: 1000m
          memory: 512Mi
      env:
        PILOT_ENABLE_WORKLOAD_ENTRY_AUTOREGISTRATION: true
        PILOT_ENABLE_CROSS_CLUSTER_WORKLOAD_ENTRY: true
        EXTERNAL_ISTIOD: false
    gateways:
      istio-ingressgateway:
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 1000m
            memory: 512Mi
  components:
    pilot:
      k8s:
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 512Mi
        hpaSpec:
          maxReplicas: 5
          minReplicas: 2
          metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: 80
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
      k8s:
        service:
          type: LoadBalancer
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 1000m
            memory: 512Mi
        hpaSpec:
          maxReplicas: 5
          minReplicas: 2
          metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: 80

---
# Gateway for AIRIS EPM
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: airis-epm-gateway
  namespace: airis-epm
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "airis.company.com"
    - "*.airis.company.com"
    tls:
      httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: airis-epm-tls
    hosts:
    - "airis.company.com"
    - "*.airis.company.com"

---
# Virtual Service for AIRIS EPM Applications
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: airis-epm-vs
  namespace: airis-epm
spec:
  hosts:
  - "airis.company.com"
  - "api.airis.company.com"
  - "dashboard.airis.company.com"
  gateways:
  - airis-epm-gateway
  http:
  # Dashboard routing
  - match:
    - headers:
        host:
          exact: dashboard.airis.company.com
    - uri:
        prefix: /dashboard
    route:
    - destination:
        host: airis-epm-frontend
        port:
          number: 80
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
  
  # API routing with versioning
  - match:
    - headers:
        host:
          exact: api.airis.company.com
    - uri:
        prefix: /api/v1
    route:
    - destination:
        host: airis-epm-api-gateway
        port:
          number: 3000
      weight: 90
    - destination:
        host: airis-epm-api-gateway-v2
        port:
          number: 3000
      weight: 10
    fault:
      delay:
        percentage:
          value: 0.1
        fixedDelay: 5s
    timeout: 60s
    retries:
      attempts: 3
      perTryTimeout: 20s
      retryOn: gateway-error,connect-failure,refused-stream
  
  # Monitoring endpoints
  - match:
    - uri:
        prefix: /prometheus
    route:
    - destination:
        host: prometheus
        port:
          number: 9090
  - match:
    - uri:
        prefix: /grafana
    route:
    - destination:
        host: grafana
        port:
          number: 3000
  - match:
    - uri:
        prefix: /kibana
    route:
    - destination:
        host: kibana
        port:
          number: 5601
  
  # Default routing
  - route:
    - destination:
        host: airis-epm-frontend
        port:
          number: 80

---
# Destination Rules for Traffic Management
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: airis-epm-api-gateway-dr
  namespace: airis-epm
spec:
  host: airis-epm-api-gateway
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 50
        maxRequestsPerConnection: 10
        maxRetries: 3
        consecutiveGatewayErrors: 5
        interval: 30s
        baseEjectionTime: 30s
    loadBalancer:
      simple: LEAST_CONN
    outlierDetection:
      consecutiveGatewayErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2

---
# Service Entry for External Dependencies
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: external-dependencies
  namespace: airis-epm
spec:
  hosts:
  - httpbin.org
  - jsonplaceholder.typicode.com
  - api.github.com
  ports:
  - number: 80
    name: http
    protocol: HTTP
  - number: 443
    name: https
    protocol: HTTPS
  location: MESH_EXTERNAL
  resolution: DNS

---
# Authentication Policy
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: airis-epm-mtls
  namespace: airis-epm
spec:
  mtls:
    mode: STRICT

---
# Authorization Policy
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: airis-epm-authz
  namespace: airis-epm
spec:
  rules:
  # Allow ingress gateway
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
  # Allow monitoring
  - from:
    - source:
        namespaces: ["istio-system"]
    to:
    - operation:
        methods: ["GET"]
        paths: ["/metrics", "/health", "/ready"]
  # Allow internal communication
  - from:
    - source:
        namespaces: ["airis-epm"]
  # API access with JWT
  - from:
    - source: {}
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE"]
        paths: ["/api/*"]
    when:
    - key: request.auth.claims[iss]
      values: ["https://auth.airis.company.com"]

---
# Request Authentication
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: airis-epm-jwt
  namespace: airis-epm
spec:
  selector:
    matchLabels:
      app: airis-epm-api-gateway
  jwtRules:
  - issuer: "https://auth.airis.company.com"
    jwksUri: "https://auth.airis.company.com/.well-known/jwks.json"
    audiences:
    - "airis-epm-api"
    forwardOriginalToken: true

---
# Service Monitor for Istio Metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: istio-mesh
  namespace: istio-system
spec:
  selector:
    matchLabels:
      app: istiod
  endpoints:
  - port: http-monitoring
    interval: 15s
    path: /stats/prometheus

---
# Telemetry Configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: metrics
  namespace: airis-epm
spec:
  metrics:
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        destination_service_name:
          operation: UPSERT
          value: "{{.destination_workload | default \"unknown\"}}"
        source_app:
          operation: UPSERT
          value: "{{.source_labels[\"app\"] | default \"unknown\"}}"

---
# Access Logging Configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: access-logs
  namespace: airis-epm
spec:
  accessLogging:
  - providers:
    - name: otel
  - filter:
      expression: 'response.code >= 400'

---
# Tracing Configuration
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: tracing
  namespace: airis-epm
spec:
  tracing:
  - providers:
    - name: jaeger