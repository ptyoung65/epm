const { chromium } = require('playwright');

async function detailedPaddingAnalysis() {
    const browser = await chromium.launch({ headless: false });
    const page = await browser.newPage();

    try {
        console.log('üîç ÏÉÅÏÑ∏Ìïú waterfall chart Ìå®Îî© Î∂ÑÏÑù ÏãúÏûë...\n');

        // ÌéòÏù¥ÏßÄ Ï†ëÏÜç Î∞è Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        await page.goto('http://localhost:3100/trace-analysis-dashboard.html', { 
            waitUntil: 'domcontentloaded',
            timeout: 10000 
        });
        await page.waitForTimeout(3000);

        // Ï∞®Ìä∏ ÌÅ¥Î¶≠ÌïòÏó¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        const canvas = await page.locator('canvas').first();
        if (await canvas.isVisible()) {
            const canvasBox = await canvas.boundingBox();
            await page.mouse.click(canvasBox.x + canvasBox.width / 2, canvasBox.y + canvasBox.height / 2);
            await page.waitForTimeout(2000);
            
            const traceItem = await page.locator('.trace-item').first();
            if (await traceItem.isVisible()) {
                await traceItem.click();
                await page.waitForTimeout(1000);
            }
        }

        console.log('üìä ÏÉÅÏÑ∏ Î†àÏù¥ÏïÑÏõÉ Î∂ÑÏÑù...\n');

        // 1. span-detail-panelÏùò ÎÇ¥Î∂Ä Ìå®Îî© ÌôïÏù∏
        const panelAnalysis = await page.evaluate(() => {
            const panel = document.querySelector('.span-detail-panel');
            if (!panel) return null;
            
            const computed = window.getComputedStyle(panel);
            const rect = panel.getBoundingClientRect();
            
            return {
                element: 'span-detail-panel',
                position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height },
                padding: {
                    left: computed.paddingLeft,
                    right: computed.paddingRight,
                    top: computed.paddingTop,
                    bottom: computed.paddingBottom
                },
                margin: {
                    left: computed.marginLeft,
                    right: computed.marginRight,
                    top: computed.marginTop,
                    bottom: computed.marginBottom
                },
                border: {
                    left: computed.borderLeftWidth,
                    right: computed.borderRightWidth,
                    top: computed.borderTopWidth,
                    bottom: computed.borderBottomWidth
                },
                boxSizing: computed.boxSizing
            };
        });

        // 2. waterfall-containerÏùò ÏÉÅÏÑ∏ Î∂ÑÏÑù
        const containerAnalysis = await page.evaluate(() => {
            const container = document.querySelector('.waterfall-container');
            if (!container) return null;
            
            const computed = window.getComputedStyle(container);
            const rect = container.getBoundingClientRect();
            
            return {
                element: 'waterfall-container',
                position: { x: rect.x, y: rect.y, width: rect.width, height: rect.height },
                padding: {
                    left: computed.paddingLeft,
                    right: computed.paddingRight,
                    top: computed.paddingTop,
                    bottom: computed.paddingBottom
                },
                margin: {
                    left: computed.marginLeft,
                    right: computed.marginRight,
                    top: computed.marginTop,
                    bottom: computed.marginBottom
                },
                border: {
                    left: computed.borderLeftWidth,
                    right: computed.borderRightWidth,
                    top: computed.borderTopWidth,
                    bottom: computed.borderBottomWidth
                }
            };
        });

        // 3. waterfall-labelsÏôÄ waterfall-timeline Ï†ïÎ†¨ Î∂ÑÏÑù
        const alignmentAnalysis = await page.evaluate(() => {
            const labels = document.querySelector('.waterfall-labels');
            const timeline = document.querySelector('.waterfall-timeline');
            
            if (!labels || !timeline) return null;
            
            const labelsRect = labels.getBoundingClientRect();
            const timelineRect = timeline.getBoundingClientRect();
            const labelsStyle = window.getComputedStyle(labels);
            const timelineStyle = window.getComputedStyle(timeline);
            
            return {
                labels: {
                    position: { x: labelsRect.x, y: labelsRect.y, width: labelsRect.width, height: labelsRect.height },
                    padding: { left: labelsStyle.paddingLeft, right: labelsStyle.paddingRight },
                    margin: { left: labelsStyle.marginLeft, right: labelsStyle.marginRight },
                    textAlign: labelsStyle.textAlign
                },
                timeline: {
                    position: { x: timelineRect.x, y: timelineRect.y, width: timelineRect.width, height: timelineRect.height },
                    padding: { left: timelineStyle.paddingLeft, right: timelineStyle.paddingRight },
                    margin: { left: timelineStyle.marginLeft, right: timelineStyle.marginRight },
                    textAlign: timelineStyle.textAlign
                },
                gap: timelineRect.x - (labelsRect.x + labelsRect.width),
                heightDiff: Math.abs(labelsRect.height - timelineRect.height)
            };
        });

        // 4. Í∞úÎ≥Ñ span ÌñâÎì§Ïùò Ï†ïÎ†¨ Î∂ÑÏÑù
        const spanRowsAnalysis = await page.evaluate(() => {
            const rows = document.querySelectorAll('.waterfall-row');
            if (rows.length === 0) return null;
            
            return Array.from(rows).slice(0, 3).map((row, index) => {
                const spanLabels = row.querySelector('.span-labels');
                const spanTimeline = row.querySelector('.span-timeline');
                
                if (!spanLabels || !spanTimeline) return null;
                
                const labelsRect = spanLabels.getBoundingClientRect();
                const timelineRect = spanTimeline.getBoundingClientRect();
                const labelsStyle = window.getComputedStyle(spanLabels);
                const timelineStyle = window.getComputedStyle(spanTimeline);
                
                return {
                    rowIndex: index + 1,
                    spanLabels: {
                        position: { x: labelsRect.x, y: labelsRect.y, width: labelsRect.width },
                        padding: { left: labelsStyle.paddingLeft, right: labelsStyle.paddingRight },
                        margin: { left: labelsStyle.marginLeft, right: labelsStyle.marginRight }
                    },
                    spanTimeline: {
                        position: { x: timelineRect.x, y: timelineRect.y, width: timelineRect.width },
                        padding: { left: timelineStyle.paddingLeft, right: timelineStyle.paddingRight },
                        margin: { left: timelineStyle.marginLeft, right: timelineStyle.marginRight }
                    },
                    gap: timelineRect.x - (labelsRect.x + labelsRect.width),
                    yAlignment: labelsRect.y - timelineRect.y
                };
            }).filter(Boolean);
        });

        // Í≤∞Í≥º Ï∂úÎ†•
        console.log('üìã span-detail-panel Î∂ÑÏÑù:');
        if (panelAnalysis) {
            console.log(`   ÏúÑÏπò: (${panelAnalysis.position.x}, ${panelAnalysis.position.y})`);
            console.log(`   ÌÅ¨Í∏∞: ${panelAnalysis.position.width}x${panelAnalysis.position.height}`);
            console.log(`   Ìå®Îî©: ${panelAnalysis.padding.left} | ${panelAnalysis.padding.right} | ${panelAnalysis.padding.top} | ${panelAnalysis.padding.bottom}`);
            console.log(`   ÎßàÏßÑ: ${panelAnalysis.margin.left} | ${panelAnalysis.margin.right} | ${panelAnalysis.margin.top} | ${panelAnalysis.margin.bottom}`);
            console.log(`   Í≤ΩÍ≥Ñ: ${panelAnalysis.border.left} | ${panelAnalysis.border.right} | ${panelAnalysis.border.top} | ${panelAnalysis.border.bottom}`);
            console.log(`   Box Sizing: ${panelAnalysis.boxSizing}\n`);
        }

        console.log('üìã waterfall-container Î∂ÑÏÑù:');
        if (containerAnalysis) {
            console.log(`   ÏúÑÏπò: (${containerAnalysis.position.x}, ${containerAnalysis.position.y})`);
            console.log(`   ÌÅ¨Í∏∞: ${containerAnalysis.position.width}x${containerAnalysis.position.height}`);
            console.log(`   Ìå®Îî©: ${containerAnalysis.padding.left} | ${containerAnalysis.padding.right} | ${containerAnalysis.padding.top} | ${containerAnalysis.padding.bottom}`);
            console.log(`   ÎßàÏßÑ: ${containerAnalysis.margin.left} | ${containerAnalysis.margin.right} | ${containerAnalysis.margin.top} | ${containerAnalysis.margin.bottom}`);
            console.log(`   Í≤ΩÍ≥Ñ: ${containerAnalysis.border.left} | ${containerAnalysis.border.right} | ${containerAnalysis.border.top} | ${containerAnalysis.border.bottom}\n`);
        }

        console.log('üìã Ìó§Îçî Ï†ïÎ†¨ Î∂ÑÏÑù:');
        if (alignmentAnalysis) {
            console.log(`   Labels ÏúÑÏπò: (${alignmentAnalysis.labels.position.x}, ${alignmentAnalysis.labels.position.y})`);
            console.log(`   Labels ÌÅ¨Í∏∞: ${alignmentAnalysis.labels.position.width}x${alignmentAnalysis.labels.position.height}`);
            console.log(`   Timeline ÏúÑÏπò: (${alignmentAnalysis.timeline.position.x}, ${alignmentAnalysis.timeline.position.y})`);
            console.log(`   Timeline ÌÅ¨Í∏∞: ${alignmentAnalysis.timeline.position.width}x${alignmentAnalysis.timeline.position.height}`);
            console.log(`   üîç Labels-Timeline Í∞ÑÍ≤©: ${alignmentAnalysis.gap}px`);
            console.log(`   üîç ÎÜíÏù¥ Ï∞®Ïù¥: ${alignmentAnalysis.heightDiff}px\n`);
        }

        console.log('üìã Í∞úÎ≥Ñ Ìñâ Ï†ïÎ†¨ Î∂ÑÏÑù:');
        if (spanRowsAnalysis && spanRowsAnalysis.length > 0) {
            spanRowsAnalysis.forEach(row => {
                console.log(`   Row ${row.rowIndex}:`);
                console.log(`     Labels ÏúÑÏπò: (${row.spanLabels.position.x}, ${row.spanLabels.position.y})`);
                console.log(`     Timeline ÏúÑÏπò: (${row.spanTimeline.position.x}, ${row.spanTimeline.position.y})`);
                console.log(`     üîç Í∞ÑÍ≤©: ${row.gap}px`);
                console.log(`     üîç YÏ∂ï Ï†ïÎ†¨ Ï∞®Ïù¥: ${row.yAlignment}px`);
                console.log(`     Labels Ìå®Îî©: L=${row.spanLabels.padding.left}, R=${row.spanLabels.padding.right}`);
                console.log(`     Timeline Ìå®Îî©: L=${row.spanTimeline.padding.left}, R=${row.spanTimeline.padding.right}\n`);
            });
        }

        // Î¨∏Ï†úÏ†ê Î∂ÑÏÑù
        console.log('üö® Ìå®Îî© Î¨∏Ï†ú Î∂ÑÏÑù:');
        
        let issues = [];
        
        if (panelAnalysis && parseInt(panelAnalysis.padding.left) === 0) {
            issues.push('‚ùå span-detail-panelÏóê ÏôºÏ™Ω Ìå®Îî©Ïù¥ ÏóÜÏùå (0px)');
        }
        
        if (containerAnalysis && parseInt(containerAnalysis.padding.left) === 0) {
            issues.push('‚ùå waterfall-containerÏóê ÏôºÏ™Ω Ìå®Îî©Ïù¥ ÏóÜÏùå (0px)');
        }
        
        if (alignmentAnalysis && Math.abs(alignmentAnalysis.gap) > 5) {
            issues.push(`‚ùå LabelsÏôÄ Timeline ÏÇ¨Ïù¥ Í∞ÑÍ≤©Ïù¥ ÎπÑÏ†ïÏÉÅÏ†Å: ${alignmentAnalysis.gap}px`);
        }
        
        if (spanRowsAnalysis) {
            spanRowsAnalysis.forEach(row => {
                if (Math.abs(row.gap) > 5) {
                    issues.push(`‚ùå Row ${row.rowIndex}: Labels-Timeline Í∞ÑÍ≤© Î¨∏Ï†ú (${row.gap}px)`);
                }
                if (Math.abs(row.yAlignment) > 2) {
                    issues.push(`‚ùå Row ${row.rowIndex}: YÏ∂ï Ï†ïÎ†¨ Î¨∏Ï†ú (${row.yAlignment}px)`);
                }
            });
        }
        
        if (issues.length === 0) {
            console.log('   ‚úÖ Ï£ºÏöî Ìå®Îî© Î¨∏Ï†úÍ∞Ä Î∞úÍ≤¨ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        } else {
            issues.forEach(issue => console.log(`   ${issue}`));
        }

        // Ï∂îÏ≤ú ÏàòÏ†ïÏÇ¨Ìï≠
        console.log('\nüí° Ï∂îÏ≤ú ÏàòÏ†ïÏÇ¨Ìï≠:');
        console.log('   1. .span-detail-panelÏóê padding-left: 15px Ï∂îÍ∞Ä');
        console.log('   2. .waterfall-containerÏóê padding: 10px Ï∂îÍ∞Ä');
        console.log('   3. .span-labelsÏôÄ .span-timeline Í∞ÑÍ≤© Ï°∞Ï†ï');
        console.log('   4. Ï†ÑÏ≤¥ Ïª®ÌÖåÏù¥ÎÑàÏùò Î∞ïÏä§ Î™®Îç∏ Ïû¨Í≤ÄÌÜ†');

        // Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ï†ÄÏû•
        await page.screenshot({ 
            path: '/home/ptyoung/work/airis-mon/clickstack-architecture/test-suite/tests/detailed-padding-analysis.png',
            fullPage: true 
        });
        
        console.log('\nüì∏ ÏÉÅÏÑ∏ Î∂ÑÏÑù Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ï†ÄÏû•Îê®: tests/detailed-padding-analysis.png');
        
        await page.waitForTimeout(3000);

    } catch (error) {
        console.error('‚ùå Ïò§Î•ò Î∞úÏÉù:', error.message);
    } finally {
        await browser.close();
    }
}

// Ïã§Ìñâ
detailedPaddingAnalysis();