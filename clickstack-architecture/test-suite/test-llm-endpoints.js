#!/usr/bin/env node

/**
 * LLM API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏
 * AIRIS-MON Test Suite LLM Integration Verification
 */

require('dotenv').config();
const axios = require('axios');

const BASE_URL = 'http://localhost:3100';

// LLM API ÏóîÎìúÌè¨Ïù∏Ìä∏ Î™©Î°ù
const LLM_ENDPOINTS = [
  { method: 'POST', path: '/api/llm/chat', name: 'Chat Completion' },
  { method: 'POST', path: '/api/llm/analyze', name: 'Analysis Tasks' },
  { method: 'GET', path: '/api/llm/models', name: 'Available Models' },
  { method: 'POST', path: '/api/llm/switch', name: 'Switch Model' },
  { method: 'GET', path: '/api/llm/health', name: 'Health Check' },
  { method: 'POST', path: '/api/llm/test-gemini', name: 'Test Gemini 2.5 API' },
  { method: 'POST', path: '/api/llm/benchmark', name: 'Performance Benchmark' },
  { method: 'POST', path: '/api/llm/korean-quality', name: 'Korean Quality Assessment' }
];

async function testLLMEndpoints() {
  console.log('üöÄ AIRIS-MON LLM API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÖåÏä§Ìä∏ ÏãúÏûë...\n');
  
  // ÌôòÍ≤ΩÎ≥ÄÏàò ÌôïÏù∏
  console.log('üìã ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï ÌôïÏù∏:');
  console.log(`  - Gemini API Key: ${process.env.GEMINI_API_KEY ? '‚úÖ ÏÑ§Ï†ïÎê®' : '‚ùå ÎØ∏ÏÑ§Ï†ï'}`);
  console.log(`  - Ollama Model: ${process.env.OLLAMA_MODEL || '‚ùå ÎØ∏ÏÑ§Ï†ï'}`);
  console.log(`  - Primary LLM: ${process.env.PRIMARY_LLM || '‚ùå ÎØ∏ÏÑ§Ï†ï'}`);
  console.log(`  - Fallback LLM: ${process.env.FALLBACK_LLM || '‚ùå ÎØ∏ÏÑ§Ï†ï'}\n`);

  // ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏
  try {
    const response = await axios.get(`${BASE_URL}/api/status`, { timeout: 3000 });
    console.log('‚úÖ AIRIS-MON ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÏÑ±Í≥µ\n');
  } catch (error) {
    console.log('‚ùå AIRIS-MON ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§.');
    console.log('   ÏÑúÎ≤ÑÎ•º Î®ºÏ†Ä ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî: npm start\n');
    return;
  }

  // LLM ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÖåÏä§Ìä∏
  console.log('üß™ LLM API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÖåÏä§Ìä∏:');
  
  for (const endpoint of LLM_ENDPOINTS) {
    try {
      let testData = {};
      
      // ÏóîÎìúÌè¨Ïù∏Ìä∏Î≥Ñ ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
      switch (endpoint.path) {
        case '/api/llm/chat':
          testData = {
            messages: [{ role: 'user', content: 'ÏïàÎÖïÌïòÏÑ∏Ïöî. ÌÖåÏä§Ìä∏ÏûÖÎãàÎã§.' }]
          };
          break;
        case '/api/llm/analyze':
          testData = {
            data: { test: 'sample data' },
            analysisType: 'general',
            language: 'korean'
          };
          break;
        case '/api/llm/switch':
          testData = { providerId: 'ollama' };
          break;
        case '/api/llm/test-gemini':
          testData = {
            testMessage: 'ÏïàÎÖïÌïòÏÑ∏Ïöî. Gemini API Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ÏûÖÎãàÎã§.'
          };
          break;
        case '/api/llm/benchmark':
          testData = {
            testPrompt: 'Í∞ÑÎã®Ìïú ÌïúÍµ≠Ïñ¥ ÌÖçÏä§Ìä∏ ÏÉùÏÑ± ÌÖåÏä§Ìä∏'
          };
          break;
        case '/api/llm/korean-quality':
          testData = {
            text: 'ÏïàÎÖïÌïòÏÑ∏Ïöî. ÌïúÍµ≠Ïñ¥ ÌíàÏßà ÌèâÍ∞Ä ÌÖåÏä§Ìä∏ Î¨∏Ïû•ÏûÖÎãàÎã§.'
          };
          break;
      }

      const config = {
        method: endpoint.method.toLowerCase(),
        url: `${BASE_URL}${endpoint.path}`,
        timeout: 10000,
        ...(endpoint.method === 'POST' && { data: testData })
      };

      const response = await axios(config);
      
      if (response.status === 200) {
        console.log(`  ‚úÖ ${endpoint.name} (${endpoint.method} ${endpoint.path})`);
        
        // Gemini ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏÉÅÏÑ∏ Ï∂úÎ†•
        if (endpoint.path === '/api/llm/test-gemini' && response.data.success) {
          console.log(`     üåü Gemini 2.5 API Ïó∞Í≤∞ ÏÑ±Í≥µ!`);
          console.log(`     üìù ÏùëÎãµ: ${response.data.data.response.substring(0, 100)}...`);
        }
      } else {
        console.log(`  ‚ö†Ô∏è ${endpoint.name} - HTTP ${response.status}`);
      }
      
    } catch (error) {
      if (error.code === 'ECONNREFUSED') {
        console.log(`  ‚ùå ${endpoint.name} - ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®`);
      } else if (error.response) {
        console.log(`  ‚ö†Ô∏è ${endpoint.name} - HTTP ${error.response.status}: ${error.response.data?.error || 'Unknown error'}`);
      } else {
        console.log(`  ‚ùå ${endpoint.name} - ${error.message}`);
      }
    }
  }

  console.log('\nüéâ LLM API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÖåÏä§Ìä∏ ÏôÑÎ£å!');
  console.log('\nüí° ÏÇ¨Ïö© Í∞ÄÎä•Ìïú API ÏóîÎìúÌè¨Ïù∏Ìä∏:');
  LLM_ENDPOINTS.forEach(endpoint => {
    console.log(`   ${endpoint.method} ${endpoint.path} - ${endpoint.name}`);
  });
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if (require.main === module) {
  testLLMEndpoints().catch(console.error);
}

module.exports = { testLLMEndpoints, LLM_ENDPOINTS };