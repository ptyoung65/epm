
services:
  # ClickHouse - Primary Database
  clickhouse:
    image: clickhouse/clickhouse-server:23.12
    hostname: clickhouse
    container_name: clickstack-architecture-clickhouse-1
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native client
    environment:
      CLICKHOUSE_DB: airis_mon
      CLICKHOUSE_USER: admin
      CLICKHOUSE_PASSWORD: airis_secure_2024
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./database/clickhouse/init:/docker-entrypoint-initdb.d
      - ./database/clickhouse/config:/etc/clickhouse-server/config.d
    networks:
      - airis_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Apache Kafka - Event Streaming
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: clickstack-architecture-kafka-1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    depends_on:
      zookeeper:
        condition: service_started
    networks:
      - airis_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 20s
      timeout: 15s
      retries: 5
      start_period: 90s

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: clickstack-architecture-zookeeper-1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - airis_network
    volumes:
      - zookeeper_data:/var/lib/zookeeper
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis - Caching & Session Store
  redis:
    image: redis:7.2-alpine
    hostname: redis
    container_name: clickstack-architecture-redis-1
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass airis_redis_2024 --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - airis_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "airis_redis_2024", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 15s

  # PostgreSQL - Primary Database for User Data & Chatbot
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    container_name: clickstack-architecture-postgres-1
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: airis_epm
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - airis_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d airis_epm -h localhost"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # AIRIS-MON API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    hostname: api-gateway
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DATABASE: airis_mon
      CLICKHOUSE_USER: admin
      CLICKHOUSE_PASSWORD: airis_secure_2024
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: airis_redis_2024
      KAFKA_BROKERS: kafka:9092
      JWT_SECRET: airis_jwt_secret_change_in_production
      API_RATE_LIMIT: 1000
    depends_on:
      - clickhouse
      - redis
      - kafka
    networks:
      - airis_network
    volumes:
      - ./services/api-gateway/src:/app/src
      - ./services/api-gateway/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Ingestion Service
  data-ingestion:
    build:
      context: ./services/data-ingestion
      dockerfile: Dockerfile
    hostname: data-ingestion
    container_name: clickstack-architecture-data-ingestion-1
    ports:
      - "3007:3001"
    environment:
      NODE_ENV: development
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DATABASE: airis_mon
      CLICKHOUSE_USER: admin
      CLICKHOUSE_PASSWORD: airis_secure_2024
      KAFKA_BROKERS: kafka:9092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: airis_redis_2024
      BATCH_SIZE: 1000
      FLUSH_INTERVAL: 5000
    depends_on:
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - airis_network
    restart: unless-stopped
    volumes:
      - ./services/data-ingestion/src:/app/src
      - ./services/data-ingestion/logs:/app/logs
      - ./scripts/universal-healthcheck.sh:/usr/local/bin/healthcheck.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh node 3001"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 45s

  # Analytics Processing Service
  analytics-engine:
    build:
      context: ./services/analytics-engine
      dockerfile: Dockerfile
    hostname: analytics-engine
    container_name: clickstack-architecture-analytics-engine-1
    environment:
      NODE_ENV: development
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DATABASE: airis_mon
      CLICKHOUSE_USER: admin
      CLICKHOUSE_PASSWORD: airis_secure_2024
      KAFKA_BROKERS: kafka:9092
      ML_MODEL_PATH: /app/models
      PORT: 3000
    depends_on:
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - airis_network
    restart: unless-stopped
    volumes:
      - ./services/analytics-engine/src:/app/src
      - ./services/analytics-engine/models:/app/models
      - ./scripts/universal-healthcheck.sh:/usr/local/bin/healthcheck.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh node 3000"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 45s

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    hostname: otel-collector
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter
      - "13133:13133" # Health check
      - "1777:1777"   # pprof
      - "55679:55679" # zPages
    environment:
      - ENVIRONMENT=development
      - TZ=Asia/Seoul
    volumes:
      - ./otel-collector-config-minimal.yaml:/etc/otel-collector-config.yaml:ro
    depends_on:
      - clickhouse
      - kafka
    networks:
      - airis_network
    restart: unless-stopped

  # Session Replay Service
  session-replay:
    build:
      context: ./services/session-replay
      dockerfile: Dockerfile
    hostname: session-replay
    container_name: clickstack-architecture-session-replay-1
    ports:
      - "3003:3000"
    environment:
      NODE_ENV: development
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DATABASE: airis_mon
      CLICKHOUSE_USER: admin
      CLICKHOUSE_PASSWORD: airis_secure_2024
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: airis_redis_2024
      KAFKA_BROKERS: kafka:9092
      MAX_SESSION_DURATION: 1800000
      SAMPLING_RATE: 1.0
    depends_on:
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - airis_network
    volumes:
      - ./services/session-replay/src:/app/src
      - session_replay_data:/app/data
      - ./scripts/universal-healthcheck.sh:/usr/local/bin/healthcheck.sh:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh node 3000"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 45s

  # AIOps ML Engine
  aiops:
    build:
      context: ./services/aiops
      dockerfile: Dockerfile
    hostname: aiops
    ports:
      - "3004:3000"
    environment:
      NODE_ENV: development
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DATABASE: airis_mon
      CLICKHOUSE_USER: admin
      CLICKHOUSE_PASSWORD: airis_secure_2024
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: airis_redis_2024
      MODEL_PATH: /app/models
      ANOMALY_THRESHOLD: 0.95
      PREDICTION_HORIZON: 24
    depends_on:
      - clickhouse
      - redis
    networks:
      - airis_network
    volumes:
      - ./services/aiops/src:/app/src
      - aiops_models:/app/models
      - aiops_data:/app/data
    restart: unless-stopped

  # Event Delta Analyzer
  event-delta-analyzer:
    build:
      context: ./services/event-delta-analyzer
      dockerfile: Dockerfile
    hostname: event-delta-analyzer
    ports:
      - "3005:3000"
    environment:
      NODE_ENV: development
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DATABASE: airis_mon
      CLICKHOUSE_USER: admin
      CLICKHOUSE_PASSWORD: airis_secure_2024
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: airis_redis_2024
      BASELINE_WINDOW: 24
      COMPARISON_WINDOW: 1
      SIGNIFICANCE_THRESHOLD: 0.05
    depends_on:
      - clickhouse
      - redis
    networks:
      - airis_network
    volumes:
      - ./services/event-delta-analyzer/src:/app/src
    restart: unless-stopped

  # NLP Search Engine
  nlp-search:
    build:
      context: ./services/nlp-search
      dockerfile: Dockerfile
    hostname: nlp-search
    ports:
      - "3006:3000"
    environment:
      NODE_ENV: development
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DATABASE: airis_mon
      CLICKHOUSE_USER: admin
      CLICKHOUSE_PASSWORD: airis_secure_2024
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: airis_redis_2024
      MAX_RESULTS: 50
      SEARCH_TIMEOUT_MS: 30000
      MIN_SIMILARITY: 0.3
      ENABLE_KOREAN_NLP: true
    depends_on:
      - clickhouse
      - redis
    networks:
      - airis_network
    volumes:
      - ./services/nlp-search/src:/app/src
    restart: unless-stopped

  # Chatbot API Service
  chatbot-api:
    build:
      context: ./services/chatbot-api
      dockerfile: Dockerfile
    hostname: chatbot-api
    ports:
      - "3013:3013"
    environment:
      NODE_ENV: development
      PORT: 3013
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: airis_epm
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: airis_redis_2024
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
      OLLAMA_BASE_URL: http://host.docker.internal:11434
      JWT_SECRET: airis_chatbot_jwt_secret_change_in_production
      CORS_ORIGINS: http://localhost:3001,http://localhost:3002
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - airis_network
    volumes:
      - ./services/chatbot-api/src:/app/src
      - ./scripts/universal-healthcheck.sh:/usr/local/bin/healthcheck.sh:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh node 3013"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 45s

  # Korean HyperDX-style UI
  ui:
    build:
      context: ./ui/korean-hyperdx-dashboard
      dockerfile: Dockerfile
    hostname: ui
    container_name: clickstack-architecture-ui-1
    ports:
      - "3001:80"
    environment:
      - NODE_ENV=production
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - airis_network
    volumes:
      - ./scripts/universal-healthcheck.sh:/usr/local/bin/healthcheck.sh:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/healthcheck.sh nginx 80"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  # NGINX Reverse Proxy
  # nginx:
  #   image: nginx:1.25-alpine
  #   hostname: nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./config/nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - api-gateway
  #     - ui
  #   networks:
  #     - airis_network

networks:
  airis_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: airis-bridge
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
          ip_range: 172.20.1.0/24
    labels:
      com.docker.compose.project: "airis-epm"
      com.docker.compose.network: "main"

volumes:
  clickhouse_data:
    driver: local
  zookeeper_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  session_replay_data:
    driver: local
  aiops_models:
    driver: local
  aiops_data:
    driver: local