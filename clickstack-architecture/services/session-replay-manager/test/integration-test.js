/**
 * AIRIS ÏÑ∏ÏÖò Î¶¨ÌîåÎ†àÏù¥ - OpenTelemetry ÌÜµÌï© Ïó∞Í≥Ñ ÏãúÏä§ÌÖú ÌÜµÌï© ÌÖåÏä§Ìä∏
 * Ï†ÑÏ≤¥ Ïó∞Í≥Ñ ÏãúÏä§ÌÖúÏùò ÎèôÏûëÏùÑ Í≤ÄÏ¶ùÌïòÎäî ÌÜµÌï© ÌÖåÏä§Ìä∏ Ïä§ÏúÑÌä∏
 */

const axios = require('axios');
const { Pool } = require('pg');

class SessionTelemetryIntegrationTest {
    constructor() {
        this.config = {
            sessionReplayApi: process.env.SESSION_API_URL || 'http://localhost:3004/api',
            otelCollectorUrl: process.env.OTEL_COLLECTOR_URL || 'http://localhost:4318',
            database: {
                host: process.env.POSTGRES_HOST || 'localhost',
                port: process.env.POSTGRES_PORT || 5432,
                database: process.env.POSTGRES_DB || 'airis_apm',
                user: process.env.POSTGRES_USER || 'postgres',
                password: process.env.POSTGRES_PASSWORD || 'postgres'
            }
        };

        this.pgPool = new Pool(this.config.database);
        this.testResults = {
            passed: 0,
            failed: 0,
            errors: [],
            details: []
        };
    }

    /**
     * Ï†ÑÏ≤¥ ÌÜµÌï© ÌÖåÏä§Ìä∏ Ïã§Ìñâ
     */
    async runAllTests() {
        console.log('üß™ AIRIS ÏÑ∏ÏÖò-ÌÖîÎ†àÎ©îÌä∏Î¶¨ ÌÜµÌï© ÌÖåÏä§Ìä∏ ÏãúÏûë');
        console.log('=' .repeat(60));

        try {
            // 1. ÏãúÏä§ÌÖú Ïó∞Í≤∞ÏÑ± ÌÖåÏä§Ìä∏
            await this.testSystemConnectivity();
            
            // 2. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà ÌÖåÏä§Ìä∏
            await this.testDatabaseSchema();
            
            // 3. ÏÑ∏ÏÖò ÏÉùÏÑ± Î∞è Í¥ÄÎ¶¨ ÌÖåÏä§Ìä∏
            await this.testSessionManagement();
            
            // 4. OpenTelemetry Ïó∞Í≥Ñ ÌÖåÏä§Ìä∏
            await this.testOpenTelemetryIntegration();
            
            // 5. ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Î∂ÑÏÑù ÌÖåÏä§Ìä∏
            await this.testCorrelationAnalysis();
            
            // 6. AI Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ± ÌÖåÏä§Ìä∏
            await this.testInsightGeneration();
            
            // 7. ÏÑ±Îä• Î∞è ÌôïÏû•ÏÑ± ÌÖåÏä§Ìä∏
            await this.testPerformanceScalability();
            
            // 8. Îç∞Ïù¥ÌÑ∞ Î¨¥Í≤∞ÏÑ± ÌÖåÏä§Ìä∏
            await this.testDataIntegrity();

            this.printResults();

        } catch (error) {
            console.error('‚ùå ÌÜµÌï© ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë ÏπòÎ™ÖÏ†Å Ïò§Î•ò:', error.message);
            this.testResults.errors.push({
                test: 'System Error',
                error: error.message,
                stack: error.stack
            });
        } finally {
            await this.cleanup();
        }
    }

    /**
     * 1. ÏãúÏä§ÌÖú Ïó∞Í≤∞ÏÑ± ÌÖåÏä§Ìä∏
     */
    async testSystemConnectivity() {
        console.log('üîå ÏãúÏä§ÌÖú Ïó∞Í≤∞ÏÑ± ÌÖåÏä§Ìä∏');

        // PostgreSQL Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
        await this.runTest('PostgreSQL Ïó∞Í≤∞', async () => {
            const client = await this.pgPool.connect();
            const result = await client.query('SELECT NOW() as current_time');
            client.release();
            
            if (!result.rows[0].current_time) {
                throw new Error('PostgreSQL ÏùëÎãµ ÏóÜÏùå');
            }
        });

        // Session Replay API Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
        await this.runTest('ÏÑ∏ÏÖò Î¶¨ÌîåÎ†àÏù¥ API Ïó∞Í≤∞', async () => {
            const response = await axios.get(`${this.config.sessionReplayApi}/info`, {
                timeout: 10000
            });
            
            if (response.status !== 200) {
                throw new Error(`API ÏùëÎãµ ÏÉÅÌÉú: ${response.status}`);
            }
        });

        // Health Check ÌÖåÏä§Ìä∏
        await this.runTest('Ìó¨Ïä§ Ï≤¥ÌÅ¨', async () => {
            const response = await axios.get(`${this.config.sessionReplayApi}/../health`, {
                timeout: 5000
            });
            
            if (!response.data || response.data.status !== 'healthy') {
                throw new Error('Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ïã§Ìå®');
            }
        });

        console.log('');
    }

    /**
     * 2. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà ÌÖåÏä§Ìä∏
     */
    async testDatabaseSchema() {
        console.log('üóÑÔ∏è Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïä§ÌÇ§Îßà ÌÖåÏä§Ìä∏');

        const requiredTables = [
            'session_tracking',
            'session_page_views',
            'session_telemetry_correlation',
            'session_analysis_insights',
            'session_tags'
        ];

        for (const table of requiredTables) {
            await this.runTest(`ÌÖåÏù¥Î∏î Ï°¥Ïû¨ ÌôïÏù∏: ${table}`, async () => {
                const client = await this.pgPool.connect();
                const result = await client.query(`
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_name = $1
                    )
                `, [table]);
                client.release();

                if (!result.rows[0].exists) {
                    throw new Error(`ÌÖåÏù¥Î∏î ${table}Ïù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå`);
                }
            });
        }

        // Î∑∞ Ï°¥Ïû¨ ÌôïÏù∏
        await this.runTest('Î∑∞ Ï°¥Ïû¨ ÌôïÏù∏: session_summary', async () => {
            const client = await this.pgPool.connect();
            const result = await client.query(`
                SELECT EXISTS (
                    SELECT FROM information_schema.views 
                    WHERE table_name = 'session_summary'
                )
            `);
            client.release();

            if (!result.rows[0].exists) {
                throw new Error('session_summary Î∑∞Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå');
            }
        });

        console.log('');
    }

    /**
     * 3. ÏÑ∏ÏÖò ÏÉùÏÑ± Î∞è Í¥ÄÎ¶¨ ÌÖåÏä§Ìä∏
     */
    async testSessionManagement() {
        console.log('üìù ÏÑ∏ÏÖò ÏÉùÏÑ± Î∞è Í¥ÄÎ¶¨ ÌÖåÏä§Ìä∏');

        let testSessionId = null;

        // ÏÑ∏ÏÖò ÏÉùÏÑ± ÌÖåÏä§Ìä∏
        await this.runTest('ÏÑ∏ÏÖò ÏÉùÏÑ±', async () => {
            const sessionData = {
                userId: 'test-user-001',
                otelSessionId: 'test-otel-session-001',
                otelTraceId: 'test-trace-001',
                geoLocation: { country: 'KR', region: 'Seoul' }
            };

            const response = await axios.post(
                `${this.config.sessionReplayApi}/sessions`,
                sessionData,
                { timeout: 10000 }
            );

            if (!response.data.success) {
                throw new Error(response.data.message || 'ÏÑ∏ÏÖò ÏÉùÏÑ± Ïã§Ìå®');
            }

            testSessionId = response.data.data.airis_session_id;
            if (!testSessionId) {
                throw new Error('ÏÑ∏ÏÖò IDÍ∞Ä Î∞òÌôòÎêòÏßÄ ÏïäÏùå');
            }
        });

        // ÏÑ∏ÏÖò Ï°∞Ìöå ÌÖåÏä§Ìä∏
        await this.runTest('ÏÑ∏ÏÖò Ï°∞Ìöå', async () => {
            if (!testSessionId) throw new Error('ÌÖåÏä§Ìä∏ ÏÑ∏ÏÖò IDÍ∞Ä ÏóÜÏùå');

            const response = await axios.get(
                `${this.config.sessionReplayApi}/sessions/${testSessionId}`,
                { timeout: 10000 }
            );

            if (!response.data.success || !response.data.data) {
                throw new Error('ÏÑ∏ÏÖò Ï°∞Ìöå Ïã§Ìå®');
            }

            const session = response.data.data;
            if (session.airis_session_id !== testSessionId) {
                throw new Error('ÏûòÎ™ªÎêú ÏÑ∏ÏÖò Îç∞Ïù¥ÌÑ∞');
            }
        });

        // ÌéòÏù¥ÏßÄÎ∑∞ Ï∂îÍ∞Ä ÌÖåÏä§Ìä∏
        await this.runTest('ÌéòÏù¥ÏßÄÎ∑∞ Ï∂îÍ∞Ä', async () => {
            if (!testSessionId) throw new Error('ÌÖåÏä§Ìä∏ ÏÑ∏ÏÖò IDÍ∞Ä ÏóÜÏùå');

            const pageViewData = {
                pageUrl: '/test-page',
                pageTitle: 'ÌÖåÏä§Ìä∏ ÌéòÏù¥ÏßÄ',
                domContentLoadedMs: 1250,
                firstContentfulPaintMs: 1800,
                clickCount: 5,
                scrollDepthPercentage: 75
            };

            const response = await axios.post(
                `${this.config.sessionReplayApi}/sessions/${testSessionId}/pageviews`,
                pageViewData,
                { timeout: 10000 }
            );

            if (!response.data.success) {
                throw new Error(response.data.message || 'ÌéòÏù¥ÏßÄÎ∑∞ Ï∂îÍ∞Ä Ïã§Ìå®');
            }
        });

        // ÏÑ∏ÏÖò ÏôÑÎ£å ÌÖåÏä§Ìä∏
        await this.runTest('ÏÑ∏ÏÖò ÏôÑÎ£å', async () => {
            if (!testSessionId) throw new Error('ÌÖåÏä§Ìä∏ ÏÑ∏ÏÖò IDÍ∞Ä ÏóÜÏùå');

            const completionData = {
                replayEventCount: 150,
                conversionEvents: [{ type: 'form_submit', value: 1 }],
                customerSatisfactionScore: 4
            };

            const response = await axios.post(
                `${this.config.sessionReplayApi}/sessions/${testSessionId}/complete`,
                completionData,
                { timeout: 10000 }
            );

            if (!response.data.success) {
                throw new Error(response.data.message || 'ÏÑ∏ÏÖò ÏôÑÎ£å Ïã§Ìå®');
            }
        });

        console.log('');
    }

    /**
     * 4. OpenTelemetry Ïó∞Í≥Ñ ÌÖåÏä§Ìä∏
     */
    async testOpenTelemetryIntegration() {
        console.log('üì° OpenTelemetry Ïó∞Í≥Ñ ÌÖåÏä§Ìä∏');

        let testSessionId = 'test-session-otel-001';

        // ÌÖåÏä§Ìä∏ ÏÑ∏ÏÖò ÏÉùÏÑ±
        await this.runTest('OpenTelemetry ÏÑ∏ÏÖò ÏÉùÏÑ±', async () => {
            const sessionData = {
                sessionId: testSessionId,
                otelSessionId: 'otel-session-integration-test',
                otelTraceId: 'trace-integration-test-001',
                userId: 'otel-test-user'
            };

            const response = await axios.post(
                `${this.config.sessionReplayApi}/sessions`,
                sessionData,
                { timeout: 10000 }
            );

            if (!response.data.success) {
                throw new Error('OpenTelemetry ÏÑ∏ÏÖò ÏÉùÏÑ± Ïã§Ìå®');
            }

            testSessionId = response.data.data.airis_session_id;
        });

        // OpenTelemetry Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ ÌÖåÏä§Ìä∏
        await this.runTest('OpenTelemetry Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏', async () => {
            const telemetryData = {
                otelSessionId: 'otel-session-updated',
                otelTraceId: 'trace-updated-001',
                spanCount: 25,
                errorCount: 2,
                avgResponseTime: 185.5,
                totalRequests: 30
            };

            const response = await axios.put(
                `${this.config.sessionReplayApi}/sessions/${testSessionId}/telemetry`,
                telemetryData,
                { timeout: 10000 }
            );

            if (!response.data.success) {
                throw new Error('OpenTelemetry Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®');
            }
        });

        // ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ ÏÉùÏÑ± ÌÖåÏä§Ìä∏
        await this.runTest('ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ ÏÉùÏÑ±', async () => {
            const correlationData = {
                otelSpanId: 'span-test-001',
                otelTraceId: 'trace-integration-test-001',
                otelServiceName: 'test-service',
                otelOperationName: 'test-operation',
                otelStartTime: new Date().toISOString(),
                otelEndTime: new Date(Date.now() + 5000).toISOString(),
                otelDurationUs: 5000000,
                replayEventTimestamp: new Date().toISOString(),
                replayEventType: 'click',
                replayEventData: { x: 100, y: 200, element: 'button' },
                isError: false,
                httpStatusCode: 200
            };

            const response = await axios.post(
                `${this.config.sessionReplayApi}/sessions/${testSessionId}/correlations`,
                correlationData,
                { timeout: 10000 }
            );

            if (!response.data.success) {
                throw new Error('ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ ÏÉùÏÑ± Ïã§Ìå®');
            }
        });

        console.log('');
    }

    /**
     * 5. ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Î∂ÑÏÑù ÌÖåÏä§Ìä∏
     */
    async testCorrelationAnalysis() {
        console.log('üîó ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Î∂ÑÏÑù ÌÖåÏä§Ìä∏');

        // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
        await this.runTest('ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå', async () => {
            const client = await this.pgPool.connect();
            const result = await client.query(`
                SELECT COUNT(*) as count FROM session_telemetry_correlation 
                WHERE correlation_confidence > 0.5
            `);
            client.release();

            const count = parseInt(result.rows[0].count);
            if (count < 1) {
                throw new Error('ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Îç∞Ïù¥ÌÑ∞Í∞Ä Ï∂©Î∂ÑÌïòÏßÄ ÏïäÏùå');
            }
        });

        // ÎÜíÏùÄ Ïã†Î¢∞ÎèÑ ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Î∂ÑÏÑù
        await this.runTest('ÎÜíÏùÄ Ïã†Î¢∞ÎèÑ ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Î∂ÑÏÑù', async () => {
            const client = await this.pgPool.connect();
            const result = await client.query(`
                SELECT 
                    session_id,
                    AVG(correlation_confidence) as avg_confidence,
                    COUNT(*) as correlation_count
                FROM session_telemetry_correlation 
                WHERE correlation_confidence > 0.8
                GROUP BY session_id
                HAVING COUNT(*) > 0
            `);
            client.release();

            if (result.rows.length === 0) {
                throw new Error('ÎÜíÏùÄ Ïã†Î¢∞ÎèÑ ÏÉÅÍ¥ÄÍ¥ÄÍ≥ÑÍ∞Ä ÏóÜÏùå');
            }

            // ÌèâÍ∑† Ïã†Î¢∞ÎèÑÍ∞Ä 0.8 Ïù¥ÏÉÅÏù∏ÏßÄ ÌôïÏù∏
            const avgConfidence = parseFloat(result.rows[0].avg_confidence);
            if (avgConfidence < 0.8) {
                throw new Error(`ÌèâÍ∑† Ïã†Î¢∞ÎèÑÍ∞Ä ÎÇÆÏùå: ${avgConfidence}`);
            }
        });

        // ÏãúÍ∞Ñ Í∏∞Î∞ò ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Í≤ÄÏ¶ù
        await this.runTest('ÏãúÍ∞Ñ Í∏∞Î∞ò ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Í≤ÄÏ¶ù', async () => {
            const client = await this.pgPool.connect();
            const result = await client.query(`
                SELECT 
                    otel_start_time,
                    replay_event_timestamp,
                    EXTRACT(EPOCH FROM (replay_event_timestamp - otel_start_time)) * 1000 as time_diff_ms
                FROM session_telemetry_correlation 
                WHERE correlation_confidence > 0.7
                ORDER BY time_diff_ms
                LIMIT 10
            `);
            client.release();

            // ÏãúÍ∞Ñ Ï∞®Ïù¥Í∞Ä ÌóàÏö© Î≤îÏúÑ(5Ï¥à) ÎÇ¥Ïù∏ÏßÄ ÌôïÏù∏
            for (const row of result.rows) {
                const timeDiff = Math.abs(parseFloat(row.time_diff_ms));
                if (timeDiff > 5000) {
                    throw new Error(`ÏãúÍ∞Ñ Ï∞®Ïù¥Í∞Ä ÌóàÏö© Î≤îÏúÑ Ï¥àÍ≥º: ${timeDiff}ms`);
                }
            }
        });

        console.log('');
    }

    /**
     * 6. AI Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ± ÌÖåÏä§Ìä∏
     */
    async testInsightGeneration() {
        console.log('ü§ñ AI Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ± ÌÖåÏä§Ìä∏');

        let testSessionId = 'test-session-insight-001';

        // ÌÖåÏä§Ìä∏ ÏÑ∏ÏÖò ÏÉùÏÑ±
        await this.runTest('Ïù∏ÏÇ¨Ïù¥Ìä∏ ÌÖåÏä§Ìä∏ ÏÑ∏ÏÖò ÏÉùÏÑ±', async () => {
            const sessionData = {
                sessionId: testSessionId,
                userId: 'insight-test-user'
            };

            const response = await axios.post(
                `${this.config.sessionReplayApi}/sessions`,
                sessionData
            );

            if (response.data.success) {
                testSessionId = response.data.data.airis_session_id;
            }
        });

        // ÏÑ±Îä• Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ±
        await this.runTest('ÏÑ±Îä• Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ±', async () => {
            const insightData = {
                analysisType: 'performance',
                insightTitle: 'ÎÜíÏùÄ ÌéòÏù¥ÏßÄ Î°úÎî© ÏãúÍ∞Ñ Í∞êÏßÄ',
                insightDescription: 'ÌéòÏù¥ÏßÄ Î°úÎî© ÏãúÍ∞ÑÏù¥ ÌèâÍ∑†Î≥¥Îã§ 3Ï¥à ÎÜíÏäµÎãàÎã§.',
                insightSeverity: 'high',
                insightCategory: 'performance',
                metricName: 'page_load_time',
                metricValue: 5500,
                metricUnit: 'ms',
                baselineValue: 2500,
                recommendations: [
                    'Ïù¥ÎØ∏ÏßÄ ÏµúÏ†ÅÌôî Í≤ÄÌÜ†',
                    'JavaScript Î≤àÎì§ ÌÅ¨Í∏∞ Ï∂ïÏÜå',
                    'CDN ÏÇ¨Ïö© Í≥†Î†§'
                ],
                estimatedImpact: 'high'
            };

            const response = await axios.post(
                `${this.config.sessionReplayApi}/sessions/${testSessionId}/insights`,
                insightData
            );

            if (!response.data.success) {
                throw new Error('ÏÑ±Îä• Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ± Ïã§Ìå®');
            }
        });

        // ÏÇ¨Ïö©Ïûê ÌñâÎèô Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ±
        await this.runTest('ÏÇ¨Ïö©Ïûê ÌñâÎèô Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ±', async () => {
            const insightData = {
                analysisType: 'user_behavior',
                insightTitle: 'ÏÇ¨Ïö©Ïûê Ïù¥ÌÉà Ìå®ÌÑ¥ Î∞úÍ≤¨',
                insightDescription: 'ÌäπÏ†ï ÌéòÏù¥ÏßÄÏóêÏÑú ÏÇ¨Ïö©Ïûê Ïù¥ÌÉàÎ•†Ïù¥ ÎÜíÏäµÎãàÎã§.',
                insightSeverity: 'medium',
                insightCategory: 'ux',
                metricName: 'bounce_rate',
                metricValue: 75,
                metricUnit: 'percent',
                baselineValue: 45,
                recommendations: [
                    'UX/UI Í∞úÏÑ†',
                    'ÏΩòÌÖêÏ∏† Í¥ÄÎ†®ÏÑ± Í≤ÄÌÜ†',
                    'ÌéòÏù¥ÏßÄ ÏÑ±Îä• ÏµúÏ†ÅÌôî'
                ],
                estimatedImpact: 'medium'
            };

            const response = await axios.post(
                `${this.config.sessionReplayApi}/sessions/${testSessionId}/insights`,
                insightData
            );

            if (!response.data.success) {
                throw new Error('ÏÇ¨Ïö©Ïûê ÌñâÎèô Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ± Ïã§Ìå®');
            }
        });

        // ÏÉùÏÑ±Îêú Ïù∏ÏÇ¨Ïù¥Ìä∏ Í≤ÄÏ¶ù
        await this.runTest('Ïù∏ÏÇ¨Ïù¥Ìä∏ Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù', async () => {
            const client = await this.pgPool.connect();
            const result = await client.query(`
                SELECT COUNT(*) as count 
                FROM session_analysis_insights 
                WHERE session_id = $1
            `, [testSessionId]);
            client.release();

            const count = parseInt(result.rows[0].count);
            if (count < 2) {
                throw new Error(`Ïù∏ÏÇ¨Ïù¥Ìä∏Í∞Ä Ï∂©Î∂ÑÌûà ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏùå: ${count}Í∞ú`);
            }
        });

        console.log('');
    }

    /**
     * 7. ÏÑ±Îä• Î∞è ÌôïÏû•ÏÑ± ÌÖåÏä§Ìä∏
     */
    async testPerformanceScalability() {
        console.log('‚ö° ÏÑ±Îä• Î∞è ÌôïÏû•ÏÑ± ÌÖåÏä§Ìä∏');

        // ÎèôÏãú ÏÑ∏ÏÖò ÏÉùÏÑ± ÌÖåÏä§Ìä∏
        await this.runTest('ÎèôÏãú ÏÑ∏ÏÖò ÏÉùÏÑ± ÏÑ±Îä•', async () => {
            const sessionCount = 50;
            const promises = [];

            const startTime = Date.now();

            for (let i = 0; i < sessionCount; i++) {
                const sessionData = {
                    userId: `perf-test-user-${i}`,
                    otelSessionId: `perf-test-otel-${i}`
                };

                promises.push(
                    axios.post(
                        `${this.config.sessionReplayApi}/sessions`,
                        sessionData,
                        { timeout: 15000 }
                    ).catch(error => ({ error: error.message }))
                );
            }

            const results = await Promise.all(promises);
            const endTime = Date.now();

            const successCount = results.filter(r => !r.error && r.data?.success).length;
            const duration = endTime - startTime;

            console.log(`    üìä ${sessionCount}Í∞ú ÏÑ∏ÏÖò Ï§ë ${successCount}Í∞ú ÏÑ±Í≥µ (${duration}ms ÏÜåÏöî)`);

            if (successCount < sessionCount * 0.8) {
                throw new Error(`ÏÑ±Í≥µÎ•†Ïù¥ ÎÑàÎ¨¥ ÎÇÆÏùå: ${successCount}/${sessionCount}`);
            }

            if (duration > 30000) {
                throw new Error(`ÏùëÎãµ ÏãúÍ∞ÑÏù¥ ÎÑàÎ¨¥ Í∏∏Ïùå: ${duration}ms`);
            }
        });

        // ÎåÄÏö©Îüâ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ ÌÖåÏä§Ìä∏
        await this.runTest('ÎåÄÏö©Îüâ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨', async () => {
            const testSessionId = 'perf-test-session-bulk';
            
            // ÌÖåÏä§Ìä∏ ÏÑ∏ÏÖò ÏÉùÏÑ±
            const sessionResponse = await axios.post(
                `${this.config.sessionReplayApi}/sessions`,
                { sessionId: testSessionId }
            );

            const sessionId = sessionResponse.data.data.airis_session_id;

            // ÎåÄÏö©Îüâ Ïù¥Î≤§Ìä∏ Î∞∞Ïπò ÏÉùÏÑ±
            const events = [];
            for (let i = 0; i < 100; i++) {
                events.push({
                    type: 'correlation',
                    sessionId: sessionId,
                    data: {
                        otelSpanId: `bulk-span-${i}`,
                        otelTraceId: `bulk-trace-${i}`,
                        otelServiceName: 'bulk-test-service',
                        otelOperationName: `bulk-operation-${i}`,
                        otelStartTime: new Date().toISOString(),
                        otelEndTime: new Date(Date.now() + 1000).toISOString(),
                        otelDurationUs: 1000000,
                        replayEventTimestamp: new Date().toISOString(),
                        replayEventType: 'bulk_event',
                        replayEventData: { index: i, data: 'test' }
                    }
                });
            }

            const startTime = Date.now();
            
            const response = await axios.post(
                `${this.config.sessionReplayApi}/sessions/events/batch`,
                { events },
                { timeout: 30000 }
            );

            const endTime = Date.now();
            const duration = endTime - startTime;

            if (!response.data.success) {
                throw new Error('ÎåÄÏö©Îüâ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ Ïã§Ìå®');
            }

            console.log(`    üìä 100Í∞ú Ïù¥Î≤§Ìä∏ Î∞∞Ïπò Ï≤òÎ¶¨: ${duration}ms ÏÜåÏöî`);

            if (duration > 15000) {
                throw new Error(`Î∞∞Ïπò Ï≤òÎ¶¨ ÏãúÍ∞ÑÏù¥ ÎÑàÎ¨¥ Í∏∏Ïùå: ${duration}ms`);
            }
        });

        console.log('');
    }

    /**
     * 8. Îç∞Ïù¥ÌÑ∞ Î¨¥Í≤∞ÏÑ± ÌÖåÏä§Ìä∏
     */
    async testDataIntegrity() {
        console.log('üîí Îç∞Ïù¥ÌÑ∞ Î¨¥Í≤∞ÏÑ± ÌÖåÏä§Ìä∏');

        // Ïô∏Îûò ÌÇ§ Ï†úÏïΩ Ï°∞Í±¥ ÌÖåÏä§Ìä∏
        await this.runTest('Ïô∏Îûò ÌÇ§ Ï†úÏïΩ Ï°∞Í±¥', async () => {
            const client = await this.pgPool.connect();
            
            // Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÏÑ∏ÏÖòÏóê ÌéòÏù¥ÏßÄÎ∑∞ Ï∂îÍ∞Ä ÏãúÎèÑ
            try {
                await client.query(`
                    INSERT INTO session_page_views (session_id, page_url)
                    VALUES ('non-existent-session', '/test')
                `);
                throw new Error('Ïô∏Îûò ÌÇ§ Ï†úÏïΩ Ï°∞Í±¥Ïù¥ ÏûëÎèôÌïòÏßÄ ÏïäÏùå');
            } catch (error) {
                if (!error.message.includes('violates foreign key constraint')) {
                    throw new Error('ÏòàÏÉÅÍ≥º Îã§Î•∏ Ïò§Î•ò: ' + error.message);
                }
                // Ïô∏Îûò ÌÇ§ Ï†úÏïΩ Ï°∞Í±¥Ïù¥ Ïò¨Î∞îÎ•¥Í≤å ÏûëÎèôÌï®
            } finally {
                client.release();
            }
        });

        // Ìä∏Î¶¨Í±∞ ÎèôÏûë ÌÖåÏä§Ìä∏
        await this.runTest('ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ ÏûêÎèô Í∞±Ïã† Ìä∏Î¶¨Í±∞', async () => {
            const client = await this.pgPool.connect();
            
            try {
                // ÌÖåÏä§Ìä∏ ÏÑ∏ÏÖò ÏÉùÏÑ±
                const insertResult = await client.query(`
                    INSERT INTO session_tracking (airis_session_id)
                    VALUES ('trigger-test-session')
                    RETURNING created_at, updated_at
                `);
                
                const originalUpdatedAt = insertResult.rows[0].updated_at;
                
                // 1Ï¥à ÎåÄÍ∏∞ ÌõÑ ÏóÖÎç∞Ïù¥Ìä∏
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                await client.query(`
                    UPDATE session_tracking 
                    SET replay_status = 'completed'
                    WHERE airis_session_id = 'trigger-test-session'
                `);
                
                // updated_atÏù¥ ÏûêÎèôÏúºÎ°ú Í∞±Ïã†ÎêòÏóàÎäîÏßÄ ÌôïÏù∏
                const updateResult = await client.query(`
                    SELECT updated_at FROM session_tracking
                    WHERE airis_session_id = 'trigger-test-session'
                `);
                
                const newUpdatedAt = updateResult.rows[0].updated_at;
                
                if (newUpdatedAt <= originalUpdatedAt) {
                    throw new Error('updated_at Ìä∏Î¶¨Í±∞Í∞Ä ÏûëÎèôÌïòÏßÄ ÏïäÏùå');
                }
                
                // ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨
                await client.query(`
                    DELETE FROM session_tracking 
                    WHERE airis_session_id = 'trigger-test-session'
                `);
                
            } finally {
                client.release();
            }
        });

        // JSON Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        await this.runTest('JSON Îç∞Ïù¥ÌÑ∞ Ïú†Ìö®ÏÑ±', async () => {
            const client = await this.pgPool.connect();
            
            try {
                // Ïò¨Î∞îÎ•∏ JSON Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
                await client.query(`
                    INSERT INTO session_tracking (airis_session_id, geo_location)
                    VALUES ('json-test-session', '{"country": "KR", "city": "Seoul"}')
                `);
                
                // JSON Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Î∞è Í≤ÄÏ¶ù
                const result = await client.query(`
                    SELECT geo_location FROM session_tracking
                    WHERE airis_session_id = 'json-test-session'
                `);
                
                const geoLocation = result.rows[0].geo_location;
                if (!geoLocation || !geoLocation.country) {
                    throw new Error('JSON Îç∞Ïù¥ÌÑ∞Í∞Ä Ïò¨Î∞îÎ•¥Í≤å Ï†ÄÏû•ÎêòÏßÄ ÏïäÏùå');
                }
                
                // ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨
                await client.query(`
                    DELETE FROM session_tracking 
                    WHERE airis_session_id = 'json-test-session'
                `);
                
            } finally {
                client.release();
            }
        });

        console.log('');
    }

    /**
     * Í∞úÎ≥Ñ ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ìó¨Ìçº
     */
    async runTest(testName, testFunction) {
        try {
            const startTime = Date.now();
            await testFunction();
            const duration = Date.now() - startTime;
            
            console.log(`  ‚úÖ ${testName} (${duration}ms)`);
            this.testResults.passed++;
            this.testResults.details.push({
                test: testName,
                status: 'PASSED',
                duration: duration
            });
            
        } catch (error) {
            console.log(`  ‚ùå ${testName}: ${error.message}`);
            this.testResults.failed++;
            this.testResults.errors.push({
                test: testName,
                error: error.message,
                stack: error.stack
            });
            this.testResults.details.push({
                test: testName,
                status: 'FAILED',
                error: error.message
            });
        }
    }

    /**
     * ÌÖåÏä§Ìä∏ Í≤∞Í≥º Ï∂úÎ†•
     */
    printResults() {
        console.log('=' .repeat(60));
        console.log('üìä ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏöîÏïΩ');
        console.log('=' .repeat(60));
        
        const total = this.testResults.passed + this.testResults.failed;
        const successRate = total > 0 ? Math.round((this.testResults.passed / total) * 100) : 0;
        
        console.log(`Ï¥ù ÌÖåÏä§Ìä∏: ${total}`);
        console.log(`ÌÜµÍ≥º: ${this.testResults.passed} ‚úÖ`);
        console.log(`Ïã§Ìå®: ${this.testResults.failed} ‚ùå`);
        console.log(`ÏÑ±Í≥µÎ•†: ${successRate}%`);
        console.log('');

        if (this.testResults.errors.length > 0) {
            console.log('üö® Ïã§Ìå®Ìïú ÌÖåÏä§Ìä∏ ÏÉÅÏÑ∏:');
            this.testResults.errors.forEach((error, index) => {
                console.log(`${index + 1}. ${error.test}`);
                console.log(`   Ïò§Î•ò: ${error.error}`);
                if (process.env.DEBUG === 'true' && error.stack) {
                    console.log(`   Ïä§ÌÉù: ${error.stack}`);
                }
                console.log('');
            });
        }

        // ÌÖåÏä§Ìä∏ Î¶¨Ìè¨Ìä∏ ÌååÏùº ÏÉùÏÑ±
        this.generateTestReport();
    }

    /**
     * ÌÖåÏä§Ìä∏ Î¶¨Ìè¨Ìä∏ ÌååÏùº ÏÉùÏÑ±
     */
    generateTestReport() {
        const fs = require('fs');
        const path = require('path');

        const report = {
            timestamp: new Date().toISOString(),
            summary: {
                total: this.testResults.passed + this.testResults.failed,
                passed: this.testResults.passed,
                failed: this.testResults.failed,
                successRate: Math.round((this.testResults.passed / (this.testResults.passed + this.testResults.failed)) * 100)
            },
            details: this.testResults.details,
            errors: this.testResults.errors,
            environment: {
                sessionReplayApi: this.config.sessionReplayApi,
                database: {
                    host: this.config.database.host,
                    port: this.config.database.port,
                    database: this.config.database.database
                }
            }
        };

        const reportPath = path.join(__dirname, `test-report-${Date.now()}.json`);
        fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
        
        console.log(`üìÑ ÌÖåÏä§Ìä∏ Î¶¨Ìè¨Ìä∏Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§: ${reportPath}`);
    }

    /**
     * Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨
     */
    async cleanup() {
        try {
            console.log('üßπ ÌÖåÏä§Ìä∏ Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨ Ï§ë...');
            
            // ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨
            const client = await this.pgPool.connect();
            await client.query(`
                DELETE FROM session_tracking 
                WHERE airis_session_id LIKE 'test-%' 
                   OR airis_session_id LIKE 'perf-test-%'
                   OR airis_session_id LIKE 'trigger-test-%'
                   OR airis_session_id LIKE 'json-test-%'
            `);
            client.release();
            
            // Ïó∞Í≤∞ Ï¢ÖÎ£å
            await this.pgPool.end();
            
            console.log('‚úÖ Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨ ÏôÑÎ£å');
            
        } catch (error) {
            console.error('‚ùå Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨ Ï§ë Ïò§Î•ò:', error.message);
        }
    }
}

// ÌÖåÏä§Ìä∏ Ïã§Ìñâ
if (require.main === module) {
    const test = new SessionTelemetryIntegrationTest();
    test.runAllTests().then(() => {
        process.exit(test.testResults.failed > 0 ? 1 : 0);
    }).catch(error => {
        console.error('ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ïã§Ìå®:', error);
        process.exit(1);
    });
}

module.exports = SessionTelemetryIntegrationTest;